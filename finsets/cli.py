# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/cli.ipynb.

# %% auto 0
__all__ = ['git_push', 'clean_readme', 'custom_push']

# %% ../nbs/cli.ipynb 2
import subprocess
from fastcore.script import call_parse
from nbdev import nbdev_export
from nbdev.quarto import refresh_quarto_yml, nbdev_readme

# %% ../nbs/cli.ipynb 3
@call_parse
def git_push(cm: str="" # Commit message; include `[skip ci]` if you don't want Github Actions to run workflows
             ):
    "Runs `git add .` then `git commit -m `cm``, then `git push`"
    
    try:
        subprocess.check_output(['git', 'add', '.'])
        subprocess.check_output(['git', 'commit', '-m', cm])
        subprocess.check_output(['git', 'push'])
        print("Changes pushed successfully.")     
    except subprocess.CalledProcessError as e:
        print("Failed to push changes.")
        print("Error:", str(e.output))

# %% ../nbs/cli.ipynb 4
@call_parse
def clean_readme(rm: str='README.md' # Path to README.md file
                 ):
    "Delete everything between <style scoped> and </style> o/w pd.DataFrame(s) will not render correctly"

    import re
    with open(rm, 'r') as file: text = file.read()

    pattern = re.compile('<style scoped>.*?</style>', re.DOTALL)
    text = re.sub(pattern, '', text)

    with open(rm, 'w') as file: file.write(text)

# %% ../nbs/cli.ipynb 5
@call_parse
def custom_push(cm: str="", # Commit message; include `[skip ci]` if you don't want Github Actions to run workflows
                rm: str="README.md", # Path to README.md file
                test: bool=False, # Whether to run tests (locally)
                nopush: bool=False, # If true, will not push to GitHub
                ):
    "Export, test (optional), and clean notebooks; render README if needed; clean README; push to Github."
    import nbdev.test, nbdev.clean
    nbdev_export.__wrapped__()
    if test: nbdev.test.nbdev_test.__wrapped__() 
    nbdev.clean.nbdev_clean.__wrapped__()
    refresh_quarto_yml()
    nbdev_readme.__wrapped__(chk_time=True)
    clean_readme.__wrapped__(rm=rm)
    if not nopush: git_push.__wrapped__(cm=cm)
