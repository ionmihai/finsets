# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_fred/00_fred.ipynb.

# %% auto 0
__all__ = ['PROVIDER', 'URL', 'LABELS_FILE', 'get_series_info', 'default_raw_vars', 'raw_metadata', 'parse_varlist', 'download',
           'clean', 'search']

# %% ../../nbs/00_fred/00_fred.ipynb 4
from typing import List, Dict
import os, time

import pandas as pd

import pandasmore as pdm
from .fred_api import Fred
from .. import RESOURCES

# %% ../../nbs/00_fred/00_fred.ipynb 5
PROVIDER = 'Federal Reserve Economic Data (FRED)'
URL = 'https://fred.stlouisfed.org/'
LABELS_FILE = RESOURCES/'fred_variable_descriptions.csv'

# %% ../../nbs/00_fred/00_fred.ipynb 6
def get_series_info(series: str=None, # FRED series name
                    api_key: str=None # FRED api key. If None, will use os.getenv("FRED_API_KEY")
                    ) -> pd.Series:
    """Get metadata from FRED for given `series` from FRED"""
    
    return Fred(api_key=api_key).get_series_info(series)

# %% ../../nbs/00_fred/00_fred.ipynb 8
def default_raw_vars() -> pd.DataFrame:
    """List of FRED series that will be used in `download()` if none are specified"""

    return ['TB3MS','DTB3','GS10','DGS10','GS1','DGS1','AAA','BAA','DAAA','DBAA','FEDFUNDS','DFF','CPIAUCSL','CPIAUCNS','INDPRO','IPB50001SQ','UNRATE','GDP','GDPC1','GNP','GNPC96','GDPPOT','USREC','RECPROUSM156N','CFNAI','UMCSENT','MICH','USEPUINDXM','USEPUNEWSINDXM','USEPUINDXD','VIXCLS','VXOCLS']


# %% ../../nbs/00_fred/00_fred.ipynb 10
def raw_metadata(vars: List[str]=None, #list of variables requested by user; if None, will use `default_raw_vars()`
                 api_key: str=None # FRED api key. If None, will use os.getenv("FRED_API_KEY")
                 ) -> pd.DataFrame:
    
    if vars is None: vars = default_raw_vars()
    
    df = get_series_info(vars[0], api_key).to_frame().T
    for v in vars[1:]:
        time.sleep(0.1)
        df = pd.concat([df, get_series_info(v).to_frame().T])

    df['min_year'] = pd.to_datetime(df['observation_start']).dt.year 
    df['max_year'] = pd.to_datetime(df['observation_end']).dt.year 
    df = df.drop(['frequency','units', 'seasonal_adjustment'], axis=1)

    labels = pd.read_csv(LABELS_FILE)
    labels = labels.rename({'Variable Name': 'id', 'Description':'name'}, axis=1)

    meta = df.merge(labels, how='left', on='id')
    meta['output_of'] = 'fred.download'
    meta = pdm.order_columns(meta, these_first=['name','id','title','min_year','max_year','output_of'])
    
    meta = meta.rename({'id':'fred_id', 'title':'label', 'frequency_short':'frequency','units_short':'unity', 'seasonal_adjustment_short':'seasonal_adj'}, axis=1)

    return meta
    

# %% ../../nbs/00_fred/00_fred.ipynb 13
def parse_varlist(vars: List[str]=None, #list of variables requested by user; if None, will use `default_raw_vars()`
                  api_key: str=None # FRED api key. If None, will use os.getenv("FRED_API_KEY")
                  ) -> Dict[str, list]:
    "Splits `vars` by frequency and returns dict with one pd.DataFrame per frequency"
     
    if vars is None: vars = default_raw_vars()

    df = pd.DataFrame(columns=['series','freq'])
    for series in vars:
        freq = get_series_info(series, api_key)['frequency_short']
        df = pd.concat([df,pd.DataFrame({'series': [series], 'freq': [freq]})], ignore_index=True)

    vars_by_freq = {}
    frequencies = list(df['freq'].value_counts().index)
    for f in frequencies:
        vars_with_this_freq = list(df['series'].loc[df.freq==f])
        vars_by_freq[f] = vars_with_this_freq

    return vars_by_freq

# %% ../../nbs/00_fred/00_fred.ipynb 16
def download(vars: str=None, # FRED series name
               api_key: str=None # FRED api key. If None, will use os.getenv("FRED_API_KEY")
               ) -> Dict[str, pd.DataFrame]: 
    """Retrieves `vars` from FRED, splits them by frequency and returns dict with one pd.DataFrame per frequency"""

    api = Fred(api_key=api_key)

    varlist = parse_varlist(vars)

    out = {}
    for freq, vars in varlist.items():
        out[freq] = pd.concat([api.get_series(series).to_frame(name=series) for series in vars], axis=1).dropna(how='all')
        
    return out

# %% ../../nbs/00_fred/00_fred.ipynb 22
def clean(data: dict=None,        # If None, downloads `vars` using `download` function
          vars: List[str]=None,         # If None, downloads `default_raw_vars`
        labels: str=None, # Name you want to give to the series in the output DataFrame. If None, uses lowercase of `series`
        api_key: str=None # FRED api key. If None, will use os.getenv("FRED_API_KEY")
        ) -> pd.DataFrame: 
    """Retrieves series from FRED, cleans the date and sets it as index"""

    if vars is None: vars = default_raw_vars()
    if data is None: data = download(vars, api_key=api_key)
    if labels is None: labels = pd.read_csv(LABELS_FILE).set_index('Variable Name')['Description'].to_dict()

    api = Fred(api_key=api_key)
    out = {}
    
    for freq, df in data.items():  
      df = df.rename(columns=labels).reset_index().rename({'index':'date'},axis=1)
      df = pdm.setup_tseries(df, freq=freq).drop('date', axis=1)
      out[freq] = df 

    return out

# %% ../../nbs/00_fred/00_fred.ipynb 28
def search(search_text: str=None, # What to search for
              order_by: str='popularity', # How to order search results; try `search_rank` if you don't find what you were looking for
              nr_results: int=10, # How many results to output
              api_key: str=None # FRED api key. If None, will use os.getenv("FRED_API_KEY")
              ) -> pd.DataFrame:
    """Search FRED for a given `search_text`, sort by popularity and return only the first `nr_results`"""

    api = Fred(api_key=api_key)  
    return api.search(search_text, order_by=order_by)\
              .pipe(pdm.order_columns, ['title', 'popularity','frequency_short', 'observation_start', 'observation_end'])\
              .iloc[:nr_results].copy()
              
