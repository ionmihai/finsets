[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "finsets",
    "section": "",
    "text": "Download and process datasets commonly used in finance research\nEach module handles a different data source. Almost all submodules (other than utility ones) have a get_raw_data function that downloads the raw data and a process_raw_data function that processes the data into a pandas.DataFrame having, as index, either:\nThe period date in the index will be named following the pattern Xdate where X is the string literal representing the frequency of the data (e.g. Mdate for monthly data, Qdate for quarterly data, Ydate for annual data).\nDocumentation site.\nGitHub page.",
    "crumbs": [
      "finsets"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "finsets",
    "section": "Install",
    "text": "Install\npip install finsets",
    "crumbs": [
      "finsets"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "finsets",
    "section": "How to use",
    "text": "How to use\n\nimport finsets as fds\n\nor\n\nfrom finsets import fred, wrds, papers\n\nBelow, we very briefly describe each submodule. For more details, please see the documentation of each submodule (they provide a lot more functionality than presented here).",
    "crumbs": [
      "finsets"
    ]
  },
  {
    "objectID": "index.html#wrds",
    "href": "index.html#wrds",
    "title": "finsets",
    "section": "WRDS",
    "text": "WRDS\n\nDownloads and processes datasets from Wharton Research Data Services WRDS.\n\nEach WRDS module handles a different library in WRDS (e.g. compa module for the Compustat Annual CCM file, crspm for the CRSP Monthly Stock file, etc.).\nBefore you use any of the wrds modules, you need to create a pgpass with your WRDS credentials. To do that, run\n\nfrom finsets.wrds import wrds_api\n\n\ndb = wrds_api.Connection()\n\nThis will prompt you for your WRDS username and password. After you enter your credentials, if you don’t have a pgpass file already set up, it will ask you if you want to do that. Hit y and it will be automatically created for you. After this, you will never have to input your WRDS password.\nYou will still have to supply your WRDS username to functions that retrieve data from WRDS (all of them have a wrds_username parameter). If you don’t want to be prompted for the username for every download, save it under a WRDS_USERNAME environment variable:\n\nOn Windows, in a Command Prompt:\n\nsetx WRDS_USERNAME \"your_wrds_username_here\"\n\nOn Linux, in a terminal:\n\necho 'export WRDS_USERNAME=\"your_wrds_username_here\"' &gt;&gt; ~/.bashrc && source ~/.bashrc\n\nOn macOS, since macOS Catalina:\n\necho 'export WRDS_USERNAME=\"your_wrds_username_here\"' &gt;&gt; ~/.zshrc && source ~/.szhrc\n\nOn macOS, prior to macOS Catalina:\n\necho 'export WRDS_USERNAME=\"your_wrds_username_here\"' &gt;&gt; ~/.bash_profile && source ~/.bash_profile\n\n\nThe functions in the wrds_ modules will close database connections to WRDS automatically. However, if you open a connection manually, as above (with wrds.Connection()) make sure you remember to close that connection. In our example above:\n\ndb.close()\n\nCheck the wrds_utils module for an introduction to some of the main utilities that come with the wrds package.",
    "crumbs": [
      "finsets"
    ]
  },
  {
    "objectID": "index.html#fred",
    "href": "index.html#fred",
    "title": "finsets",
    "section": "FRED",
    "text": "FRED\n\nDownloads and processes datasets from the St. Louis FRED.\n\nTo use the functions in the fred module, you’ll need an API key from the St. Louis FRED.\nGet one here and store it in your environment variables under the name FRED_API_KEY\nAlternatively, you can supply the API key directly as the api_key parameter in each function in the fred module.\n\ngdp = fred.fred.get_raw_data(['GDP'])\n\n\ngdp['info']\n\n\n\n\n\n\n\n\n\nid\nrealtime_start\nrealtime_end\ntitle\nobservation_start\nobservation_end\nfrequency\nfrequency_short\nunits\nunits_short\nseasonal_adjustment\nseasonal_adjustment_short\nlast_updated\npopularity\nnotes\n\n\n\n\n0\nGDP\n2023-11-15\n2023-11-15\nGross Domestic Product\n1947-01-01\n2023-07-01\nQuarterly\nQ\nBillions of Dollars\nBil. of $\nSeasonally Adjusted Annual Rate\nSAAR\n2023-10-26 07:55:01-05\n92\nBEA Account Code: A191RC Gross domestic produ...\n\n\n\n\n\n\n\n\n\ngdp['Q']\n\n\n\n\n\n\n\n\n\nGDP\n\n\n\n\n1947-01-01\n243.164\n\n\n1947-04-01\n245.968\n\n\n1947-07-01\n249.585\n\n\n1947-10-01\n259.745\n\n\n1948-01-01\n265.742\n\n\n...\n...\n\n\n2022-07-01\n25994.639\n\n\n2022-10-01\n26408.405\n\n\n2023-01-01\n26813.601\n\n\n2023-04-01\n27063.012\n\n\n2023-07-01\n27623.543\n\n\n\n\n307 rows × 1 columns",
    "crumbs": [
      "finsets"
    ]
  },
  {
    "objectID": "index.html#papers",
    "href": "index.html#papers",
    "title": "finsets",
    "section": "PAPERS",
    "text": "PAPERS\n\nDownloads and processes datasets made available by the authors of academic papers.\n\nEach papers module handles a different paper. The naming convention is that the module’s name is made up of the last names of the authors and the publication year, separated by underscores. If more than two authors, all but the first author’s name is replaced by ‘etal’. For example, the module for the paper “Firm-Level Political Risk: Measurement and Effects” (2019) by Tarek A. Hassan, Stephan Hollander, Laurence van Lent, Ahmed Tahoun is named hasan_etal_2019.\n\npapers.hassan_etal_2019.list_all_vars().head()\n\n\n\n\n\n\n\n\n\nname\n\n\n\n\n0\ngvkey\n\n\n1\ndate\n\n\n2\nPRisk\n\n\n3\nNPRisk\n\n\n4\nRisk",
    "crumbs": [
      "finsets"
    ]
  },
  {
    "objectID": "00_fred/fred_api.html",
    "href": "00_fred/fred_api.html",
    "title": "fred_api",
    "section": "",
    "text": "This fork fixes errors caused by out-of-range timestamps produced in the original fredapi package (version 0.5.0).\n\nsource\n\nFred\n\n Fred (api_key=None, api_key_file=None)\n\nInitialize the Fred class that provides useful functions to query the Fred dataset. You need to specify a valid API key in one of 3 ways: pass the string via api_key, or set api_key_file to a file with the api key in the first line, or set the environment variable FRED_API_KEY to the value of your api key. You can sign up for a free api key on the Fred website at http://research.stlouisfed.org/fred2/",
    "crumbs": [
      "FRED",
      "fred_api"
    ]
  },
  {
    "objectID": "01_wrds/compa_ccm.html",
    "href": "01_wrds/compa_ccm.html",
    "title": "compa_ccm",
    "section": "",
    "text": "from __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\nimport numpy as np\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/center-research-security-prices-crsp/annual-update/crspcompustat-merged/fundamentals-annual/'\nLIBRARY = 'comp'\nTABLE = 'funda'\nLINK_LIBRARY = 'crsp'\nLINK_TABLE = 'ccmxpf_lnkhist'\nCOMPANY_TABLE = 'company' #contains some header information that is missing from comp.funda (e.g. sic and naics) \nFREQ = 'A'\nMIN_YEAR = 1950\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'permno'\nENTITY_ID_IN_CLEAN_DSET = 'permno'\nTIME_VAR_IN_RAW_DSET = 'datadate'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS f{LIBRARY}.{TABLE} and {LIBRARY}.{COMPANY_TABLE}.\n\nall_vars = list_all_vars()\n\n\nall_vars.name.count()\n\n987\n\n\n\nsource\n\n\ndefault_raw_vars\n\n default_raw_vars ()\n\nDefines default variables used in get_raw_data if none are specified.\n\nprint(default_raw_vars())\n\n['datadate', 'gvkey', 'cusip', 'cik', 'tic', 'fyear', 'fyr', 'fic', 'naicsh', 'sich', 'sic', 'naics', 'exchg', 'lt', 'at', 'txditc', 'pstkl', 'pstkrv', 'pstk', 'csho', 'ajex', 'rdip', 'act', 'dvc', 'xad', 'seq', 'che', 'lct', 'dlc', 'ib', 'dvp', 'txdi', 'dp', 'txp', 'oancf', 'ivncf', 'fincf', 'dltt', 'mib', 'ceq', 'invt', 'cogs', 'revt', 'sale', 'capx', 'xrd', 'txdb', 'prcc_f', 'sstk', 'prstkc', 'dltis', 'dltr', 'emp', 'dd1', 'ppegt', 'ppent', 'xint', 'txt', 'sppe', 'gdwl', 'xrent', 're', 'dvpsx_f', 'tstk', 'wcap', 'rect', 'xsga', 'aqc', 'oibdp', 'dpact', 'ni', 'ivao', 'ivst', 'dv', 'intan', 'pi', 'txfo', 'pifo', 'xpp', 'drc', 'drlt', 'ap', 'xacc', 'itcb']\n\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:List[str]=None, required_vars=[])\n\nFigures out which vars come from the {LIBRARY}.{TABLE} table and which come from the {LIBRARY}.{COMPANY_TABLE} table and adds a. and b. prefixes to variable names to feed into an SQL query\n\nparse_varlist(['at','lt'])\n\n'a.at,a.lt'\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]=None, required_vars:List[str]=['gvkey',\n               'datadate'], nrows:int=None, start_date:str=None,\n               end_date:str=None)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE} library and adds PERMNO and PERMCO as in CCM\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\nNone\nIf None, downloads default_raw_vars; use ’*’ to get all available variables\n\n\nrequired_vars\nList[str]\n[‘gvkey’, ‘datadate’]\nlist of variables that will get downloaded, even if not in vars\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nReturns\npd.DataFrame\n\n\n\n\n\nThe get_raw_data function will produce identical results to the ones we would obtain if we used the WRDS website (with the default options unchanged).\nIt results in no permno-datadate duplicates, but there is a small number of gvkey-datadate duplicates (about 1% of the data) because each permno maps to a unique gvkey+iid value and some gvkeys have multiple share classes (different iid’s).\nIf we restrict ourselves to primary securities, i.e. linkprim in ('P','C') (which retains 99% of the data), this results in unique gvkey-datadate records which is why we use it as the default option in the process_raw_data function below.\n\nr = get_raw_data(vars='*', nrows=1)\nr\n\n\n\n\n\n\n\n\n\npermno\npermco\nliid\nlinkprim\ngvkey\ndatadate\nfyear\nindfmt\nconsol\npopsrc\n...\npriusa\nsic\nspcindcd\nspcseccd\nspcsrc\nstate\nstko\nweburl\ndldte\nipodate\n\n\n\n\n0\n25881.0\n23369.0\n01\nP\n001000\n1970-12-31\n1970.0\nINDL\nC\nD\n...\n01\n3089\n325.0\n978.0\nNone\nNone\n0.0\nNone\n1978-06-30\nNone\n\n\n\n\n1 rows × 986 columns\n\n\n\n\n\nraw = get_raw_data(vars = ['at', 'lt'], start_date='01/01/2021', end_date='01/01/2022', nrows=1)\n\n\nraw.head(0)\n\n\n\n\n\n\n\n\n\npermno\npermco\nliid\nlinkprim\ngvkey\ndatadate\nat\nlt\n\n\n\n\n\n\n\n\n\n\n\nraw = get_raw_data(start_date='01/01/2021', end_date='01/01/2023')\n\n\nraw.head(0)\n\n\n\n\n\n\n\n\n\npermno\npermco\nliid\nlinkprim\ngvkey\ndatadate\nrect\nsich\ncik\nfyr\n...\nceq\ndltt\nppegt\ntxdi\ndltis\nsstk\ndrc\nrdip\ncusip\ntxfo\n\n\n\n\n\n\n0 rows × 88 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   linkprim_filter:list=['P', 'C'], clean_kwargs:dict={})\n\nApplies pandasmore.setup_panel to df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and datadate columns\n\n\nlinkprim_filter\nlist\n[‘P’, ‘C’]\n\n\n\nclean_kwargs\ndict\n{}\nParams to pass to pdm.setup_panel other than panel_ids, time_var, and freq\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf_clean = process_raw_data(raw)\n\n\ndf_clean.head(0)\n\n\n\n\n\n\n\n\n\n\ndatadate\ndtdate\npermco\nliid\nlinkprim\ngvkey\nrect\nsich\ncik\nfyr\n...\nceq\ndltt\nppegt\ntxdi\ndltis\nsstk\ndrc\nrdip\ncusip\ntxfo\n\n\npermno\nAdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 rows × 88 columns\n\n\n\n\n\nsource\n\n\nfeatures\n\n features (df:pandas.core.frame.DataFrame=None)\n\n\nftrs = features(df_clean)\n\n\nftrs.head(1)\n\n\n\n\n\n\n\n\n\n\nsic_full\nnaics_full\nstock_price\nlag_at\nmktcap\npstk0\npref_stock\nshreq\nbookeq\nbookeq_w_itcb\n...\ncflow_is\ncflow_cfs\ncflow_full\ncflow_is_2la\ncflow_cfs_2la\ncflow_full_2la\ncash_2a\nbooklev\ndividends_2la\nrepurchases_2la\n\n\npermno\nAdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10026\n2021\n2050\n311812\n152.82\nNaN\n2916.41688\n0.0\n0.0\n845.654\n907.232\n907.232\n...\n104.998\n101.499\n101.499\nNaN\nNaN\nNaN\n0.259461\n0.053934\nNaN\nNaN\n\n\n\n\n1 rows × 34 columns",
    "crumbs": [
      "WRDS",
      "compa_ccm"
    ]
  },
  {
    "objectID": "01_wrds/ratios.html",
    "href": "01_wrds/ratios.html",
    "title": "ratios",
    "section": "",
    "text": "From the manual\nData Source:\nAll accounting related data are obtained from Compustat Quarterly and Annual file. Pricing related data, such as Market Capitalization and Price, are obtained from both CRSP and Compustat, and we rely on CRSP as the primary data source for pricing data. Earnings related data are from IBES database.\nData Frequency:\nThe final outputs for both individual firm and industry-level aggregated value are at monthly frequency. In order to populate the data to monthly frequency, we carry forward the most recent quarterly or annual data item, whichever is most recently available at a given time stamp, to the subsequent months before the next filing data becomes available. In addition, in order to make sure that all data is publicly available at the monthly time stamp, we lag all observations by two months to avoid any look ahead bias.4\nOutlier Control:\nAs ratio metrics often produce unintended extreme outliers, we impose two layers of outliers control before aggregating at the industry level. First, for all the monthly frequency firm level individual ratio results, we impose a winsorization at 1% level for extreme values, and truncate the outliers in the top and bottom percentile to be missing. Secondly, to arrive at the final ratio output, we enforce a 12 month moving average on the monthly frequency financial ratios. The second step serves two purpose: to further smooth the final output, and to fill in the truncated extreme months (from step 1) with firm-specific moving average. Note that the outlier controls are only applied to the ratios fed to the industry-level aggregation. Outputs for firm-level financial ratios are raw ratios without any truncation or smoothing. Hence researchers are advised to censor/smooth the raw ratios to get rid of the extreme outliers before conducting further analysis.\n\npublic_date: date on which the information was available to the public\nadate: fiscal year to which the information pertains\nqdate: fiscal quarter to which the information pertains\n\n\n\nNOTE:\n\nThis dataset has three variables that are in levels (apart from the ID variables): be, mktcap, and price (i.e. book equity, market cap, and stock price).\nExcludes financials.\nID variables are: permno, gvkey, ticker, cusip, public_date, adate, qdate, gsector, gicdesc, and all variables starting with “ffi”\n\n\n\nfrom __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/financial-ratios-suite-wrds/financial-ratios-with-ibes-subscription/financial-ratios-firm-level-ibes/'\nLIBRARY = 'wrdsapps_finratio_ibes'\nTABLE = 'firm_ratio_ibes'\nFREQ = 'M'\nMIN_YEAR = 1970\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'permno'\nENTITY_ID_IN_CLEAN_DSET = 'permno'\nTIME_VAR_IN_RAW_DSET = 'public_date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS f{LIBRARY}.{TABLE}\n\nall_vars = list_all_vars()\n\n\nall_vars.name.count()\n\n100\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]=None, nrows:int=None, start_date:str=None,\n               end_date:str=None)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE} library\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\nNone\nIf None or ’*’, downloads all variables\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nraw = get_raw_data(start_date='01/01/2021', nrows=1000)\n\n\nraw.head(0)\n\n\n\n\n\n\n\n\n\ngvkey\npermno\nadate\nqdate\npublic_date\ncapei\nbe\nbm\nevm\npe_op_basic\n...\nffi30_desc\nffi30\nffi38_desc\nffi38\nffi48_desc\nffi48\nffi49_desc\nffi49\nticker\ncusip\n\n\n\n\n\n\n0 rows × 100 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   clean_kwargs:dict={})\n\nConverts some variables to categorical and applies pandasmore.setup_panel to df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and datadate columns\n\n\nclean_kwargs\ndict\n{}\nParams to pass to pdm.setup_panel other than panel_ids, time_var, and freq\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf_clean = process_raw_data(raw)\n\n\ndf_clean.head(1)\n\n\n\n\n\n\n\n\n\n\npublic_date\ndtdate\ngvkey\nadate\nqdate\ncapei\nbe\nbm\nevm\npe_op_basic\n...\nffi30_desc\nffi30\nffi38_desc\nffi38\nffi48_desc\nffi48\nffi49_desc\nffi49\nticker\ncusip\n\n\npermno\nMdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10145\n2021-01\n2021-01-31\n2021-01-31\n001300\n2019-12-31\n2020-09-30\n28.329023\n19548.0\n0.16924\n17.302839\n24.574843\n...\nNaN\nNaN\nGOVT\n37\nNaN\nNaN\nNaN\nNaN\nHON\n43851610\n\n\n\n\n1 rows × 100 columns\n\n\n\n\n\nsource\n\n\nkeep_only_ratios\n\n keep_only_ratios (df:pandas.core.frame.DataFrame)\n\n\nkeep_only_ratios(df_clean).head(1)\n\n\n\n\n\n\n\n\n\n\ncapei\nbm\nevm\npe_op_basic\npe_op_dil\npe_exi\npe_inc\nps\npcf\ndpr\n...\nrd_sale\nadv_sale\nstaff_sale\naccrual\nret_crsp\nptb\npeg_trailing\ndivyield\npeg_1yrforward\npeg_ltgforward\n\n\npermno\nMdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10145\n2021-01\n28.329023\n0.16924\n17.302839\n24.574843\n24.856234\n28.030129\n28.030129\n4.125068\n22.696753\n0.514853\n...\n0.046821\n0.0\n0.0\n-0.017443\n-0.081476\n7.012911\n0.958785\n0.019041\n-2.024123\n10.657844\n\n\n\n\n1 rows × 72 columns",
    "crumbs": [
      "WRDS",
      "ratios"
    ]
  },
  {
    "objectID": "01_wrds/crspm.html",
    "href": "01_wrds/crspm.html",
    "title": "crspm",
    "section": "",
    "text": "Since this is a proprietary dataset, in the documentation below, I can not show any of the data that is being retrieved/generated (will show only column names).\n\nfrom __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\nimport numpy as np\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/center-research-security-prices-crsp/annual-update/stock-security-files/monthly-stock-file/'\nLIBRARY = 'crsp'\nTABLE = 'msf'\nNAMES_TABLE = 'msenames'\nDELIST_TABLE = 'msedelist'\nFREQ = 'M'\nMIN_YEAR = 1925\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'permno'\nENTITY_ID_IN_CLEAN_DSET = 'permno'\nTIME_VAR_IN_RAW_DSET = 'date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS {LIBRARY}.{TABLE} and {LIBRARY}.{NAMES_TABLE}\n\nall_vars = list_all_vars()\n\n\nall_vars.name.count()\n\n61\n\n\n\nall_vars.head()\n\n\n\n\n\n\n\n\n\nname\ntype\nwrds_library\nwrds_table\n\n\n\n\n0\ncusip\nVARCHAR(8)\ncrsp\nmsf\n\n\n1\npermno\nDOUBLE_PRECISION\ncrsp\nmsf\n\n\n2\npermco\nDOUBLE_PRECISION\ncrsp\nmsf\n\n\n3\nissuno\nDOUBLE_PRECISION\ncrsp\nmsf\n\n\n4\nhexcd\nDOUBLE_PRECISION\ncrsp\nmsf\n\n\n\n\n\n\n\n\n\nsource\n\n\ndefault_raw_vars\n\n default_raw_vars ()\n\nDefines default variables used in get_raw_data if none are specified.\n\nprint(default_raw_vars())\n\n['permno', 'permco', 'date', 'ret', 'retx', 'shrout', 'prc', 'shrcd', 'exchcd', 'siccd', 'naics', 'ticker', 'cusip', 'ncusip', 'dlret', 'dlstcd', 'dlstdt']\n\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:List[str]=None, required_vars=[])\n\nFigures out which vars come from the {LIBRARY}.{TABLE} table and which come from the {LIBRARY}.{NAMES_TABLE} table and adds a. and b. prefixes to variable names to feed into an SQL query\n\nparse_varlist(['ret', 'siccd', 'naics', 'dlret'])\n\n'c.dlret,b.naics,b.siccd,a.ret'\n\n\n\nparse_varlist('*')\n\n'a.cusip,a.permno,a.permco,a.issuno,a.hexcd,a.hsiccd,a.date,a.bidlo,a.askhi,a.prc,a.vol,a.ret,a.bid,a.ask,a.shrout,a.cfacpr,a.cfacshr,a.altprc,a.spread,a.altprcdt,a.retx,b.namedt,b.nameendt,b.shrcd,b.exchcd,b.siccd,b.ncusip,b.ticker,b.comnam,b.shrcls,b.tsymbol,b.naics,b.primexch,b.trdstat,b.secstat,b.compno,c.dlstdt,c.dlstcd,c.nwperm,c.nwcomp,c.nextdt,c.dlamt,c.dlretx,c.dlprc,c.dlpdt,c.dlret,c.acperm,c.accomp'\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]=None, required_vars=['permno', 'date'],\n               nrows:int=None, start_date:str=None, end_date:str=None)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE}, {LIBRARY}.{NAMES_TABLE} and {LIBRARY}.{DELIST_TABLE}.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\nNone\nIf None, downloads default_raw_vars; use ’*’ to get all available variables\n\n\nrequired_vars\nlist\n[‘permno’, ‘date’]\nVariables that are always downloaded, regardless vars argument\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nr = get_raw_data(vars = '*', nrows=100)\nr.head(1)\n\n\n\n\n\n\n\n\n\ncusip\npermno\npermco\nissuno\nhexcd\nhsiccd\ndate\nbidlo\naskhi\nprc\n...\nnwperm\nnwcomp\nnextdt\ndlamt\ndlretx\ndlprc\ndlpdt\ndlret\nacperm\naccomp\n\n\n\n\n0\n68391610\n10000.0\n7952.0\n10396.0\n3.0\n3990.0\n1985-12-31\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNone\nNaN\nNaN\nNaN\nNone\nNaN\nNone\nNone\n\n\n\n\n1 rows × 48 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   clean_kwargs:dict={})\n\nApplies pandasmore.setup_panel to df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and date columns\n\n\nclean_kwargs\ndict\n{}\nParams to pass to pdm.setup_panel other than panel_ids, time_var, and freq\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf = process_raw_data(r)\n\n\ndf.head(0)\n\n\n\n\n\n\n\n\n\n\ndate\ndtdate\ncusip\npermco\nissuno\nhexcd\nhsiccd\nbidlo\naskhi\nprc\n...\nnwperm\nnwcomp\nnextdt\ndlamt\ndlretx\ndlprc\ndlpdt\ndlret\nacperm\naccomp\n\n\npermno\nMdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 rows × 48 columns\n\n\n\n\n\nsource\n\n\ndelist_adj_ret\n\n delist_adj_ret (df:pandas.core.frame.DataFrame,\n                 adj_ret_var:str='ret_adj')\n\nAdjusts for returns for delisting using Shumway and Warther (1999) and Johnson and Zhao (2007)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\n\nRequires ret,exchcd,dlret,dlstcd, and dlstdt variables\n\n\nadj_ret_var\nstr\nret_adj\nName of the adjusted return variable created by this function\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndl = delist_adj_ret(process_raw_data(get_raw_data(['dlret','dlstcd','dlstdt','exchcd','ret','siccd','naics'], nrows=1000)))   \ndl.head(0)\n\n\n\n\n\n\n\n\n\n\ndate\ndtdate\nnaics\ndlret\ndlstdt\nexchcd\ndlstcd\nret\nsiccd\nret_adj\n\n\npermno\nMdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nfeatures\n\n features (df:pandas.core.frame.DataFrame)\n\n\nftr = features(df)\n\n\nftr.head(1)\n\n\n\n\n\n\n\n\n\n\nret_adj\nlbhret12\nretvol12\n\n\npermno\nMdate\n\n\n\n\n\n\n\n10000\n1985-12\nNaN\nNaN\nNaN",
    "crumbs": [
      "WRDS",
      "crspm"
    ]
  },
  {
    "objectID": "01_wrds/compq.html",
    "href": "01_wrds/compq.html",
    "title": "compq",
    "section": "",
    "text": "from __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\nimport numpy as np\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/compustat-capital-iq-standard-poors/compustat/north-america-daily/fundamentals-quarterly/'\nLIBRARY = 'comp'\nTABLE = 'fundq'\nCOMPANY_TABLE = 'company' #contains some header information that is missing from comp.funda (e.g. sic and naics) \nFREQ = 'Q'\nMIN_YEAR = 1961\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'gvkey'\nENTITY_ID_IN_CLEAN_DSET = 'gvkey'\nTIME_VAR_IN_RAW_DSET = 'datadate'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS f{LIBRARY}.{TABLE} and {LIBRARY}.{COMPANY_TABLE}.\n\nall_vars = list_all_vars()\n\n\nall_vars.query(\"name.str.contains('naics')\")\n\n\n\n\n\n\n\n\n\nname\ntype\nwrds_library\nwrds_table\n\n\n\n\n25\nnaics\nVARCHAR(6)\ncomp\ncompany\n\n\n\n\n\n\n\n\n\nsource\n\n\ndefault_raw_vars\n\n default_raw_vars ()\n\nDefines default variables used in get_raw_data if none are specified.\n\nprint(default_raw_vars())\n\n['datadate', 'gvkey', 'cik', 'cusip', 'fyearq', 'fqtr', 'fyr', 'sic', 'naics', 'exchg', 'rdq', 'fic', 'atq', 'req', 'xrdq', 'cheq', 'saleq', 'revtq', 'dpq', 'ibq', 'cshoq', 'ceqq', 'seqq', 'txdiq', 'ltq', 'txditcq', 'pstkq', 'pstkrq', 'lctq', 'actq', 'piq', 'niq', 'cshprq', 'epsfxq', 'opepsq', 'epsfiq', 'epspiq', 'epspxq', 'dlttq', 'dlcq', 'txtq', 'xintq', 'ppegtq', 'ppentq', 'rectq', 'invtq', 'cogsq', 'xsgaq', 'ajexq', 'prccq', 'capxy', 'oancfy', 'sstky', 'prstkcy', 'dltisy', 'dltry', 'dvpq', 'dvy', 'sppey', 'aqcy', 'fopty', 'scstkcy', 'wcapq', 'oibdpq', 'tstkq', 'apdedateq', 'fdateq', 'cdvcy', 'cheq', 'intanq', 'gdwlq', 'mibq', 'oiadpq', 'ivaoq', 'npq', 'rectrq']\n\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:List[str]=None, required_vars=[])\n\nFigures out which vars come from the {LIBRARY}.{TABLE} table and which come from the {LIBRARY}.{COMPANY_TABLE} table and adds a. and b. prefixes to variable names to feed into an SQL query\n\nparse_varlist(['atq','ltq','sic'])\n\n'b.sic,a.ltq,a.atq'\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]=None, required_vars:List[str]=['gvkey',\n               'datadate', 'fyearq', 'fqtr', 'rdq'], nrows:int=None,\n               start_date:str=None, end_date:str=None)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE} and {LIBRARY}.{COMPANY_TABLE}. It also adds sich and naicsh from the annual table (comp.funda)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\nNone\nIf None, downloads default_raw_vars; use ’*’ to get all available variables\n\n\nrequired_vars\nList[str]\n[‘gvkey’, ‘datadate’, ‘fyearq’, ‘fqtr’, ‘rdq’]\nlist of variables that will get downloaded, even if not in vars\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nReturns\npd.DataFrame\n\n\n\n\n\nThe get_raw_data function will produce unique gvkey-datadate records, which is not the case for the data we would get from the WRDS website, because they use indfmt IN ('INDL','FS') (while we use indfmt='INDL').\n\nm = get_raw_data(['atq','indfmt','sic'],nrows=1)\nm\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nfyearq\nfqtr\nrdq\nindfmt\nsic\natq\nsich\nnaicsh\n\n\n\n\n0\n001000\n1966-03-31\n1966.0\n1.0\nNone\nINDL\n3089\nNone\nNone\nNone\n\n\n\n\n\n\n\n\n\nr = get_raw_data(vars='*', nrows=1000)\nr.head(1)\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nfyearq\nfqtr\nfyr\nindfmt\nconsol\npopsrc\ndatafmt\ntic\n...\nspcindcd\nspcseccd\nspcsrc\nstate\nstko\nweburl\ndldte\nipodate\nsich\nnaicsh\n\n\n\n\n0\n001345\n1962-04-30\n1961.0\n4.0\n4.0\nINDL\nC\nD\nSTD\n3ALRM\n...\n440.0\n978.0\nNone\nGA\n0.0\nNone\n1980-06-30\nNone\nNone\nNaN\n\n\n\n\n1 rows × 683 columns\n\n\n\n\n\nraw = get_raw_data(start_date='01/01/2021', end_date='01/01/2023')\n\n\nraw.head(0)\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nfyearq\nfqtr\nrdq\nnaics\nsstky\nseqq\nactq\nsaleq\n...\nepsfxq\nfdateq\ncdvcy\nwcapq\noiadpq\ntxdiq\ngdwlq\nreq\nsich\nnaicsh\n\n\n\n\n\n\n0 rows × 77 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   clean_kwargs:dict={})\n\nDrops duplicage, cleans up dates and applies pandasmore.setup_panel to df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and datadate columns\n\n\nclean_kwargs\ndict\n{}\nParams to pass to pdm.setup_panel other than panel_ids, time_var, and freq\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf_clean = process_raw_data(raw)\n\n\nprint(df_clean.shape)\ndf_clean.head(1)\n\n(95932, 79)\n\n\n\n\n\n\n\n\n\n\n\ndatadate\ndtdate\ndtdate_fiscal\nQdate_fiscal\nfyearq\nfqtr\nrdq\nnaics\nsstky\nseqq\n...\nepsfxq\nfdateq\ncdvcy\nwcapq\noiadpq\ntxdiq\ngdwlq\nreq\nsich\nnaicsh\n\n\ngvkey\nQdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n001004\n2021Q1\n2021-02-28\n2021-02-28\n2020-09-30\n2020Q3\n2020.0\n3.0\n2021-03-23\n423860\nNaN\n932.4\n...\n0.87\n2021-04-05\nNaN\n640.7\n19.5\nNaN\nNaN\n685.3\n5080\n423860\n\n\n\n\n1 rows × 79 columns\n\n\n\n\n\nsource\n\n\nytd_to_quarterly\n\n ytd_to_quarterly (df:pandas.core.frame.DataFrame=None,\n                   vars:List[str]=['capxy', 'oancfy', 'sstky', 'prstkcy',\n                   'dltisy', 'dltry', 'dvy', 'sppey', 'aqcy', 'fopty',\n                   'scstkcy'], suffix:str='_q')\n\nConvert YTD variables to quarterly variables by taking the difference between the current and previous quarter.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\n\n\n\nvars\nList[str]\n[‘capxy’, ‘oancfy’, ‘sstky’, ‘prstkcy’, ‘dltisy’, ‘dltry’, ‘dvy’, ‘sppey’, ‘aqcy’, ‘fopty’, ‘scstkcy’]\n\n\n\nsuffix\nstr\n_q\nSuffix to add to the new quarterly variables\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nq = ytd_to_quarterly(df_clean)\nq.head(0)\n\n\n\n\n\n\n\n\n\n\ncapxy_q\noancfy_q\nsstky_q\nprstkcy_q\ndltisy_q\ndltry_q\ndvy_q\nsppey_q\naqcy_q\nfopty_q\nscstkcy_q\n\n\ngvkey\nQdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nfeatures\n\n features (df:pandas.core.frame.DataFrame=None)\n\nComputes a set of features from df\n\nftrs = features(df_clean)\n\n\nftrs.head(1)\n\n\n\n\n\n\n\n\n\n\ncapxy_q\noancfy_q\nsstky_q\nprstkcy_q\ndltisy_q\ndltry_q\ndvy_q\nsppey_q\naqcy_q\nfopty_q\n...\ncflow_is\ncflow_cfs\ncflow_full\ncflow_is_2la\ncflow_cfs_2la\ncflow_full_2la\ncash_2a\nbooklev\ndividends_2la\nrepurchases_2la\n\n\ngvkey\nQdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n001004\n2021Q1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n40.0\nNaN\nNaN\nNaN\nNaN\nNaN\n0.068542\nNaN\nNaN\nNaN\n\n\n\n\n1 rows × 44 columns",
    "crumbs": [
      "WRDS",
      "compq"
    ]
  },
  {
    "objectID": "01_wrds/wrds_api.html",
    "href": "01_wrds/wrds_api.html",
    "title": "wrds_api",
    "section": "",
    "text": "This is a fork of version 3.1.6 of the wrds package. The fork allows users to store their WRDS password as environment variable WRDS_PASS (e.g. in GitHub Actions secrets). This facilitates testing in the CI pipeline without having to create a pgpass file on a remote server. For local use, the preferred method is to use a pgpass file, not an environment variable with the WRDS password.\nWhen establishing a connection with WRDS database, Connection will first look for the WRDS_PASS environment variable. If it can’t find it, it then looks for a pgpass file. If it can’t find that either, it prompts the user for a password.\nAlso added a download function which is a wrapper around the Connection().raw_sql method that manages the connection with WRDS for you (using a context manager).\nsource",
    "crumbs": [
      "WRDS",
      "wrds_api"
    ]
  },
  {
    "objectID": "01_wrds/wrds_api.html#examples-of-useful-features-of-the-connection-class",
    "href": "01_wrds/wrds_api.html#examples-of-useful-features-of-the-connection-class",
    "title": "wrds_api",
    "section": "Examples of useful features of the Connection class",
    "text": "Examples of useful features of the Connection class\n\n#db = Connection(wrds_username=os.getenv('WRDS_USERNAME'))\ndb = Connection()\n\n\ndb.list_libraries()[:5]\n\n['aha_sample', 'audit', 'audit_acct_os', 'audit_audit_comp', 'audit_common']\n\n\n\ndb.list_tables(library='crsp')[:5]\n\n['acti', 'asia', 'asib', 'asic', 'asio']\n\n\n\ndb.describe_table(library='comp',table='funda').iloc[:5]\n\n\n\n\n\n\n\n\n\nname\nnullable\ntype\ncomment\n\n\n\n\n0\ngvkey\nTrue\nVARCHAR(6)\nNone\n\n\n1\ndatadate\nTrue\nDATE\nNone\n\n\n2\nfyear\nTrue\nDOUBLE_PRECISION\nNone\n\n\n3\nindfmt\nTrue\nVARCHAR(12)\nNone\n\n\n4\nconsol\nTrue\nVARCHAR(2)\nNone\n\n\n\n\n\n\n\n\n\ndb.get_table(library='ff', \n             table='factors_monthly',\n             columns=['date','mktrf','smb','hml','rf'],\n             obs=5)\n\n\n\n\n\n\n\n\n\ndate\nmktrf\nsmb\nhml\nrf\n\n\n\n\n0\n1926-07-01\n0.029600\n-0.025600\n-0.024300\n0.00220\n\n\n1\n1926-08-01\n0.026400\n-0.011700\n0.038200\n0.00250\n\n\n2\n1926-09-01\n0.003600\n-0.014000\n0.001300\n0.00230\n\n\n3\n1926-10-01\n-0.032400\n-0.000900\n0.007000\n0.00320\n\n\n4\n1926-11-01\n0.025300\n-0.001000\n-0.005100\n0.00310\n\n\n\n\n\n\n\n\n\ndb.close()\n\n\nsource\n\nvalidate_dates\n\n validate_dates (date_strings:List[str])",
    "crumbs": [
      "WRDS",
      "wrds_api"
    ]
  },
  {
    "objectID": "01_wrds/crspd.html",
    "href": "01_wrds/crspd.html",
    "title": "crspd",
    "section": "",
    "text": "Since this is a proprietary dataset, in the documentation below, I can not show any of the data that is being retrieved/generated (will show only column names).\n\nfrom __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\nimport numpy as np\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/center-research-security-prices-crsp/annual-update/stock-security-files/daily-stock-file/'\nLIBRARY = 'crsp'\nTABLE = 'dsf'\nNAMES_TABLE = 'dsenames'\nDELIST_TABLE = 'dsedelist'\nFREQ = 'D'\nMIN_YEAR = 1925\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'permno'\nENTITY_ID_IN_CLEAN_DSET = 'permno'\nTIME_VAR_IN_RAW_DSET = 'date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS {LIBRARY}.{TABLE} and {LIBRARY}.{NAMES_TABLE}\n\nall_vars = list_all_vars()\n\n\nall_vars.name.count()\n\n60\n\n\n\nall_vars.head()\n\n\n\n\n\n\n\n\n\nname\ntype\nwrds_library\nwrds_table\n\n\n\n\n0\ncusip\nVARCHAR(8)\ncrsp\ndsf\n\n\n1\npermno\nDOUBLE_PRECISION\ncrsp\ndsf\n\n\n2\npermco\nDOUBLE_PRECISION\ncrsp\ndsf\n\n\n3\nissuno\nDOUBLE_PRECISION\ncrsp\ndsf\n\n\n4\nhexcd\nDOUBLE_PRECISION\ncrsp\ndsf\n\n\n\n\n\n\n\n\n\nsource\n\n\ndefault_raw_vars\n\n default_raw_vars ()\n\nDefines default variables used in get_raw_data if none are specified.\n\nprint(default_raw_vars())\n\n['permno', 'permco', 'date', 'ret', 'retx', 'shrout', 'prc', 'shrcd', 'exchcd', 'cfacpr', 'cfacshr', 'dlret', 'dlstcd', 'dlstdt']\n\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:List[str]=None, required_vars=[])\n\nFigures out which vars come from the {LIBRARY}.{TABLE} table and which come from the {LIBRARY}.{NAMES_TABLE} table and adds a. and b. prefixes to variable names to feed into an SQL query\n\nparse_varlist(['ret', 'siccd', 'dlret'])\n\n'c.dlret,a.ret,b.siccd'\n\n\n\nparse_varlist('*')\n\n'a.cusip,a.permno,a.permco,a.issuno,a.hexcd,a.hsiccd,a.date,a.bidlo,a.askhi,a.prc,a.vol,a.ret,a.bid,a.ask,a.shrout,a.cfacpr,a.cfacshr,a.openprc,a.numtrd,a.retx,b.namedt,b.nameendt,b.shrcd,b.exchcd,b.siccd,b.ncusip,b.ticker,b.comnam,b.shrcls,b.tsymbol,b.naics,b.primexch,b.trdstat,b.secstat,b.compno,c.dlstdt,c.dlstcd,c.nwperm,c.nwcomp,c.nextdt,c.dlamt,c.dlretx,c.dlprc,c.dlpdt,c.dlret,c.acperm,c.accomp'\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]=None, required_vars=['permno', 'date'],\n               nrows:int=None, start_date:str='01/01/1950',\n               end_date:str=None, shrcd_exchcd_filters:bool=True)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE}, {LIBRARY}.{NAMES_TABLE} and {LIBRARY}.{DELIST_TABLE}.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\nNone\nIf None, downloads default_raw_vars; use ’*’ to get all available variables\n\n\nrequired_vars\nlist\n[‘permno’, ‘date’]\nVariables that are always downloaded, regardless vars argument\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\n01/01/1950\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nshrcd_exchcd_filters\nbool\nTrue\nIf true, keep only observations with shrcd in [10,11] and exchcd in [1,2,3]\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nr = get_raw_data(vars = '*', nrows=1000)\nr.head(1)\n\n\n\n\n\n\n\n\n\ncusip\npermno\npermco\nissuno\nhexcd\nhsiccd\ndate\nbidlo\naskhi\nprc\n...\nnwperm\nnwcomp\nnextdt\ndlamt\ndlretx\ndlprc\ndlpdt\ndlret\nacperm\naccomp\n\n\n\n\n0\n68391610\n10000.0\n7952.0\n10396.0\n3.0\n3990.0\n1986-01-07\n2.375\n2.75\n-2.5625\n...\nNaN\nNaN\nNone\nNaN\nNaN\nNaN\nNone\nNaN\nNone\nNone\n\n\n\n\n1 rows × 47 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   clean_kwargs:dict={})\n\nApplies pandasmore.setup_panel to df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and date columns\n\n\nclean_kwargs\ndict\n{}\nParams to pass to pdm.setup_panel other than panel_ids, time_var, and freq\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf = process_raw_data(r)\n\n\ndf.head(0)\n\n\n\n\n\n\n\n\n\n\ndate\ndtdate\ncusip\npermco\nissuno\nhexcd\nhsiccd\nbidlo\naskhi\nprc\n...\nnwperm\nnwcomp\nnextdt\ndlamt\ndlretx\ndlprc\ndlpdt\ndlret\nacperm\naccomp\n\n\npermno\nDdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 rows × 47 columns\n\n\n\n\n\nsource\n\n\ndelist_adj_ret\n\n delist_adj_ret (df:pandas.core.frame.DataFrame,\n                 adj_ret_var:str='ret_adj')\n\nAdjusts for returns for delisting using Shumway and Warther (1999) and Johnson and Zhao (2007)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\n\nRequires ret,exchcd,dlret,dlstcd, and dlstdt variables\n\n\nadj_ret_var\nstr\nret_adj\nName of the adjusted return variable created by this function\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndl = delist_adj_ret(process_raw_data(get_raw_data(['dlret','dlstcd','dlstdt','exchcd','ret','naics','siccd'], nrows=1000)))   \ndl.head(0)\n\n\n\n\n\n\n\n\n\n\ndate\ndtdate\nexchcd\ndlstcd\nnaics\ndlret\nsiccd\ndlstdt\nret\nret_adj\n\n\npermno\nDdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nfeatures\n\n features (df:pandas.core.frame.DataFrame)\n\n\nftr = features(df)\n\n\nftr.head(0)\n\n\n\n\n\n\n\n\n\n\nret_adj\nlbhret12\nretvol12\n\n\npermno\nDdate",
    "crumbs": [
      "WRDS",
      "crspd"
    ]
  },
  {
    "objectID": "fetch_tools.html",
    "href": "fetch_tools.html",
    "title": "fetch_tools",
    "section": "",
    "text": "Utilities that facilitate retrieval of data from the web\n\n\nTEST_URL = 'https://www.dropbox.com/s/96xo9f1twlu3525/firmquarter_2022q1.csv?raw=1'\n\n\nsource\n\nget_text_file_from_url\n\n get_text_file_from_url (url, nrows:int=None, delimiter:str=',',\n                         headers:dict=None, skiprows:int=None,\n                         encoding:str='utf-8', **pd_read_csv_kwargs)\n\nGets the first nrows from the file found at url. Data at url must be separated by delimiter and be readable by pandas.read_csv\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl\n\n\nData at this url must be readable with pandas.read_csv\n\n\nnrows\nint\nNone\nGet only the first nrows from the file. If None, gets the entire file\n\n\ndelimiter\nstr\n,\n\n\n\nheaders\ndict\nNone\nHeaders to pass to the request\n\n\nskiprows\nint\nNone\nSkip the first skiprows rows\n\n\nencoding\nstr\nutf-8\nEncoding to use when reading the file\n\n\npd_read_csv_kwargs\n\n\n\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf = get_text_file_from_url(TEST_URL, nrows=5, delimiter='\\t')\ndf\n\n\n\n\n\n\n\n\n\ngvkey\ndate\nPRisk\nNPRisk\nRisk\nPSentiment\nNPSentiment\nSentiment\nPRiskT_economic\nPRiskT_environment\n...\nCovid_Risk\nSARS_Exposure\nH1N1_Exposure\nZika_Exposure\nEbola_Exposure\nBrexit_Exposure\nBrexit_Neg_Sentiment\nBrexit_Pos_Sentiment\nBrexit_Net_Sentiment\nBrexit_Risk\n\n\n\n\n0\n1004\n2002q1\n359.55072\n2928.6014\n168.98235\n997.864150\n5550.5807\n469.39542\n9001.563\n6331.43\n...\n0\n0\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n1004\n2002q2\n0.00000\n0.0000\n0.00000\n1594.732100\n-5656.6074\n544.82417\n0.000\n0.00\n...\n0\n0\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n1004\n2002q3\n0.00000\n0.0000\n0.00000\n49.334494\n-17818.4180\n318.47134\n0.000\n0.00\n...\n0\n0\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n1004\n2003q3\n0.00000\n0.0000\n0.00000\n2581.944100\n81710.4830\n1314.82830\n0.000\n0.00\n...\n0\n0\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n4 rows × 36 columns\n\n\n\n\n\ndf = get_text_file_from_url(TEST_URL, nrows=5, delimiter='\\t', usecols=['gvkey','date', 'PRisk'])\ndf\n\n\n\n\n\n\n\n\n\ngvkey\ndate\nPRisk\n\n\n\n\n0\n1004\n2002q1\n359.55072\n\n\n1\n1004\n2002q2\n0.00000\n\n\n2\n1004\n2002q3\n0.00000\n\n\n3\n1004\n2003q3\n0.00000"
  },
  {
    "objectID": "02_papers/gilchrist_zakrajsek_2012.html",
    "href": "02_papers/gilchrist_zakrajsek_2012.html",
    "title": "Gilchrist and Zakrajsek (2012)",
    "section": "",
    "text": "This module downloads and processes data developed by:\n\nGilchrist, Simon, and Egon Zakrajšek. 2012. “Credit Spreads and Business Cycle Fluctuations.” American Economic Review 102 (4): 1692-1720. https://doi.org/10.1257/aer.102.4.1692\n\n\nPROVIDER = 'Gilchrist, Simon, and Egon Zakrajšek, 2012'\nURL = 'https://www.federalreserve.gov/econres/notes/feds-notes/ebp_csv.csv'\nHOST_WEBSITE = 'https://www.federalreserve.gov/econres/notes/feds-notes/updating-the-recession-risk-and-the-excess-bond-premium-20161006.html'\nFREQ = 'M'\nMIN_YEAR = 1973\nMAX_YEAR = None\nTIME_VAR_IN_RAW_DSET = 'date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nget_raw_data\n\n get_raw_data (url:str='https://www.federalreserve.gov/econres/notes/feds-\n               notes/ebp_csv.csv', nrows:int=None, delimiter:str=',',\n               headers:dict=None)\n\nDownload raw data from url\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl\nstr\nhttps://www.federalreserve.gov/econres/notes/feds-notes/ebp_csv.csv\n\n\n\nnrows\nint\nNone\nHow many rows to download. If None, all rows are downloaded\n\n\ndelimiter\nstr\n,\n\n\n\nheaders\ndict\nNone\n\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nraw = get_raw_data(nrows=3)\n\n\nraw\n\n\n\n\n\n\n\n\n\ndate\ngz_spread\nebp\nest_prob\n\n\n\n\n0\n1973-01-01\n1.101827\n0.015875\n0.229627\n\n\n1\n1973-02-01\n1.045423\n-0.001218\n0.223800\n\n\n\n\n\n\n\n\n\nsource\n\n\nlist_all_vars\n\n list_all_vars ()\n\n\nlist_all_vars()\n\n\n\n\n\n\n\n\n\nname\n\n\n\n\n0\ndate\n\n\n1\ngz_spread\n\n\n2\nebp\n\n\n3\nest_prob\n\n\n\n\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None)\n\n\nclean = process_raw_data(raw)\nclean\n\n\n\n\n\n\n\n\n\ndate\ndtdate\ngz_spread\nebp\nest_prob\n\n\nMdate\n\n\n\n\n\n\n\n\n\n1973-01\n1973-01-01\n1973-01-01\n1.101827\n0.015875\n0.229627\n\n\n1973-02\n1973-02-01\n1973-02-01\n1.045423\n-0.001218\n0.223800",
    "crumbs": [
      "Papers",
      "Gilchrist and Zakrajsek (2012)"
    ]
  },
  {
    "objectID": "02_papers/dickerson_etal_2023.html",
    "href": "02_papers/dickerson_etal_2023.html",
    "title": "Dickerson, et al. (2023)",
    "section": "",
    "text": "This module downloads and processes data developed by:\n\nAlexander Dickerson, Philippe Mueller, Cesare Robotti, 2023, “Priced risk in corporate bonds” Journal of Financial Economics, 150 (2), pp.2135-2202. https://doi.org/10.1016/j.jfineco.2023.103707.\n\nSee the authors’ dedicated website for more information on this dataset: https://openbondassetpricing.com/\n\nPROVIDER = 'Alexander Dickerson, Philippe Mueller, Cesare Robotti, 2023'\nURL = 'https://openbondassetpricing.com/wp-content/uploads/2023/10/WRDS_MMN_Corrected_Data.csv.zip' #contains a gzip file inside a zip file\nGZ_FILE = 'WRDS_MMN_Corrected_Data.csv.gzip'\nHOST_WEBSITE = 'https://openbondassetpricing.com/'\nFREQ = 'M'\nMIN_YEAR = 2002\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'cusip' # 9 digit cusip\nENTITY_ID_IN_CLEAN_DSET = 'cusip'\nTIME_VAR_IN_RAW_DSET = 'date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nget_raw_data\n\n get_raw_data (url:str='https://openbondassetpricing.com/wp-\n               content/uploads/2023/10/WRDS_MMN_Corrected_Data.csv.zip',\n               gz_file:str='WRDS_MMN_Corrected_Data.csv.gzip')\n\nDownload raw data from url\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl\nstr\nhttps://openbondassetpricing.com/wp-content/uploads/2023/10/WRDS_MMN_Corrected_Data.csv.zip\n\n\n\ngz_file\nstr\nWRDS_MMN_Corrected_Data.csv.gzip\nName of the gzip file inside the zip file found at url\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nraw = get_raw_data()\n\n\nraw.head(0)\n\n\n\n\n\n\n\n\n\ndate\ncusip\nexretn_t+1\nexretnc_dur_t+1\nbond_ret_t+1\nbond_ret\nexretn\nexretnc_dur\nrating\ncs\n...\nBOND_YIELD\nCS\nBONDPRC\nPRFULL\nDURATION\nCONVEXITY\nbond_value\nBOND_VALUE\ndtdate\nMdate\n\n\n\n\n\n\n0 rows × 35 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   permno_to_bond_cusip:Union[bool,pandas.core.frame.DataF\n                   rame]=True)\n\nCleans up dates and optionally adds CRSP permnos\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\n\n\n\npermno_to_bond_cusip\nbool | pd.DataFrame\nTrue\nWhether to download permno-cusip link. If DataFrame, must contain ‘cusip’\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nclean = process_raw_data(raw)\n\n\nclean.head(0)\n\n\n\n\n\n\n\n\n\ndate\ncusip\nexretn_t+1\nexretnc_dur_t+1\nbond_ret_t+1\nbond_ret\nexretn\nexretnc_dur\nrating\ncs\n...\ndtdate\nMdate\npermno\npermco\ntrace_startdt\ntrace_enddt\ncrsp_startdt\ncrsp_enddt\nlink_startdt\nlink_enddt\n\n\n\n\n\n\n0 rows × 43 columns",
    "crumbs": [
      "Papers",
      "Dickerson, et al. (2023)"
    ]
  },
  {
    "objectID": "02_papers/gurkaynak_etal_2007.html",
    "href": "02_papers/gurkaynak_etal_2007.html",
    "title": "Gürkaynak, et al. (2007)",
    "section": "",
    "text": "This module downloads and processes data developed by:\n\nGürkaynak, Refet S, Brian Sack, and Jonathan H Wright, 2007, The US Treasury yield curve: 1961 to the present, Journal of Monetary Economics 54, 2291–2304. https://doi.org/10.1016/j.jmoneco.2007.06.029\n\nSee the FED Board dedicated website for more information on this dataset: https://www.federalreserve.gov/data/nominal-yield-curve.htm\n\nPROVIDER = 'Gürkaynak, Refet S, Brian Sack, and Jonathan H Wright, 2007'\nURL = 'https://www.federalreserve.gov/data/yield-curve-tables/feds200628.csv'\nHOST_WEBSITE = 'https://www.federalreserve.gov/data/nominal-yield-curve.htm'\nFREQ = 'D'\nMIN_YEAR = 1961\nMAX_YEAR = None\nTIME_VAR_IN_RAW_DSET = 'Date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nget_raw_data\n\n get_raw_data (url:str='https://www.federalreserve.gov/data/yield-curve-\n               tables/feds200628.csv', nrows:int=None, delimiter:str=',',\n               skiprows:int=9, headers:dict=None)\n\nDownload raw data from url\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl\nstr\nhttps://www.federalreserve.gov/data/yield-curve-tables/feds200628.csv\n\n\n\nnrows\nint\nNone\nHow many rows to download. If None, all rows are downloaded\n\n\ndelimiter\nstr\n,\n\n\n\nskiprows\nint\n9\n\n\n\nheaders\ndict\nNone\n\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nraw = get_raw_data(nrows=3)\n\n\nraw\n\n\n\n\n\n\n\n\n\nDate\nBETA0\nBETA1\nBETA2\nBETA3\nSVEN1F01\nSVEN1F04\nSVEN1F09\nSVENF01\nSVENF02\n...\nSVENY23\nSVENY24\nSVENY25\nSVENY26\nSVENY27\nSVENY28\nSVENY29\nSVENY30\nTAU1\nTAU2\n\n\n\n\n0\n1961-06-14\n3.917606\n-1.277955\n-1.949397\n0\n3.8067\n3.9562\nNaN\n3.5492\n3.8825\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.339218\n-999.99\n\n\n1\n1961-06-15\n3.978498\n-1.257404\n-2.247617\n0\n3.8694\n4.0183\nNaN\n3.5997\n3.9460\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.325775\n-999.99\n\n\n\n\n2 rows × 100 columns\n\n\n\n\n\nsource\n\n\nlist_all_vars\n\n list_all_vars ()\n\n\nlist_all_vars()\n\n\n\n\n\n\n\n\n\nname\n\n\n\n\n0\nDate\n\n\n1\nBETA0\n\n\n2\nBETA1\n\n\n3\nBETA2\n\n\n4\nBETA3\n\n\n...\n...\n\n\n95\nSVENY28\n\n\n96\nSVENY29\n\n\n97\nSVENY30\n\n\n98\nTAU1\n\n\n99\nTAU2\n\n\n\n\n100 rows × 1 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None)\n\n\nclean = process_raw_data(raw)\nclean\n\n\n\n\n\n\n\n\n\nDate\ndtdate\nBETA0\nBETA1\nBETA2\nBETA3\nSVEN1F01\nSVEN1F04\nSVEN1F09\nSVENF01\n...\nSVENY23\nSVENY24\nSVENY25\nSVENY26\nSVENY27\nSVENY28\nSVENY29\nSVENY30\nTAU1\nTAU2\n\n\nDdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1961-06-14\n1961-06-14\n1961-06-14\n3.917606\n-1.277955\n-1.949397\n0\n3.8067\n3.9562\nNaN\n3.5492\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.339218\n-999.99\n\n\n1961-06-15\n1961-06-15\n1961-06-15\n3.978498\n-1.257404\n-2.247617\n0\n3.8694\n4.0183\nNaN\n3.5997\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.325775\n-999.99\n\n\n\n\n2 rows × 101 columns",
    "crumbs": [
      "Papers",
      "Gürkaynak, et al. (2007)"
    ]
  },
  {
    "objectID": "02_papers/hassan_etal_2019.html",
    "href": "02_papers/hassan_etal_2019.html",
    "title": "Hassan, et al. (2019)",
    "section": "",
    "text": "This module downloads and processes data developed by:\n\nTarek A. Hassan, Stephan Hollander, Laurence van Lent, Ahmed Tahoun, 2019, “Firm-Level Political Risk: Measurement and Effects,” Quarterly Journal of Economics, 134 (4), pp.2135-2202. https://doi.org/10.1093/qje/qjz021.\n\nThe dataset also contains data developed by the papers below:\n\nTarek A. Hassan, Stephan Hollander, Laurence van Lent, Ahmed Tahoun, “The Global Impact of Brexit Uncertainty,” 2020, NBER Working Paper 26609\nTarek A. Hassan, Stephan Hollander, Laurence van Lent, Markus Schwedeler, Ahmed Tahoun, “Firm-level Exposure to Epidemic Diseases: Covid-19, SARS, and H1N1,” 2020, mimeo London Business School. Avilable at SSRN: https://ssrn.com/abstract=3566530\n\nSee the authors’ dedicated website for more information on this dataset: https://www.firmlevelrisk.com/\n\nPROVIDER = 'Tarek A. Hassan, Stephan Hollander, Laurence van Lent, Ahmed Tahoun, 2019'\nURL = 'https://www.dropbox.com/s/96xo9f1twlu3525/firmquarter_2022q1.csv?raw=1'\nHOST_WEBSITE = 'https://www.firmlevelrisk.com/'\nFREQ = 'Q'\nMIN_YEAR = 2002\nMAX_YEAR = 2022\nENTITY_ID_IN_RAW_DSET = 'gvkey'\nENTITY_ID_IN_CLEAN_DSET = 'permno'\nTIME_VAR_IN_RAW_DSET = 'date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars (url:str='https://www.dropbox.com/s/96xo9f1twlu3525/firmqua\n                rter_2022q1.csv?raw=1', delimiter:str='\\t')\n\n\nalv = list_all_vars()\nalv.head()\n\n\n\n\n\n\n\n\n\nname\n\n\n\n\n0\ngvkey\n\n\n1\ndate\n\n\n2\nPRisk\n\n\n3\nNPRisk\n\n\n4\nRisk\n\n\n\n\n\n\n\n\n\nprint(list(alv.name))\n\n['gvkey', 'date', 'PRisk', 'NPRisk', 'Risk', 'PSentiment', 'NPSentiment', 'Sentiment', 'PRiskT_economic', 'PRiskT_environment', 'PRiskT_trade', 'PRiskT_institutions', 'PRiskT_health', 'PRiskT_security', 'PRiskT_tax', 'PRiskT_technology', 'company_name', 'hqcountrycode', 'isin', 'cusip', 'ticker', 'date_earningscall', 'Covid_Exposure', 'Covid_Neg_Sentiment', 'Covid_Pos_Sentiment', 'Covid_Net_Sentiment', 'Covid_Risk', 'SARS_Exposure', 'H1N1_Exposure', 'Zika_Exposure', 'Ebola_Exposure', 'Brexit_Exposure', 'Brexit_Neg_Sentiment', 'Brexit_Pos_Sentiment', 'Brexit_Net_Sentiment', 'Brexit_Risk']\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (url:str='https://www.dropbox.com/s/96xo9f1twlu3525/firmquar\n               ter_2022q1.csv?raw=1', nrows:int=None, delimiter:str='\\t')\n\nDownload raw data from url\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl\nstr\nhttps://www.dropbox.com/s/96xo9f1twlu3525/firmquarter_2022q1.csv?raw=1\n\n\n\nnrows\nint\nNone\nHow many rows to download. If None, all rows are downloaded\n\n\ndelimiter\nstr\n\n\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nraw = get_raw_data(nrows=3)\n\n\nraw\n\n\n\n\n\n\n\n\n\ngvkey\ndate\nPRisk\nNPRisk\nRisk\nPSentiment\nNPSentiment\nSentiment\nPRiskT_economic\nPRiskT_environment\n...\nCovid_Risk\nSARS_Exposure\nH1N1_Exposure\nZika_Exposure\nEbola_Exposure\nBrexit_Exposure\nBrexit_Neg_Sentiment\nBrexit_Pos_Sentiment\nBrexit_Net_Sentiment\nBrexit_Risk\n\n\n\n\n0\n1004\n2002q1\n359.55072\n2928.6014\n168.98235\n997.86415\n5550.5807\n469.39542\n9001.563\n6331.43\n...\n0\n0\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n1004\n2002q2\n0.00000\n0.0000\n0.00000\n1594.73210\n-5656.6074\n544.82417\n0.000\n0.00\n...\n0\n0\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n2 rows × 36 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   gvkey_permno_link:Union[bool,pandas.core.frame.DataFram\n                   e]=True)\n\nConverts gvkey to string and applies pandasmore.setup_panel. Adds permno if gvkey_permno_link is not False.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nRaw data\n\n\ngvkey_permno_link\nbool | pd.DataFrame\nTrue\nWhether to download permno or not. If DataFrame, must contain permno, gvkey, and Qdate\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf = process_raw_data(raw, gvkey_permno_link=False)\n\n\ndf\n\n\n\n\n\n\n\n\n\n\ndate\ndtdate\nPRisk\nNPRisk\nRisk\nPSentiment\nNPSentiment\nSentiment\nPRiskT_economic\nPRiskT_environment\n...\nCovid_Risk\nSARS_Exposure\nH1N1_Exposure\nZika_Exposure\nEbola_Exposure\nBrexit_Exposure\nBrexit_Neg_Sentiment\nBrexit_Pos_Sentiment\nBrexit_Net_Sentiment\nBrexit_Risk\n\n\ngvkey\nQdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n001004\n2002Q1\n2002-03-31\n2002-03-31\n359.55072\n2928.6014\n168.98235\n997.86415\n5550.5807\n469.39542\n9001.563\n6331.43\n...\n0\n0\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2002Q2\n2002-06-30\n2002-06-30\n0.00000\n0.0000\n0.00000\n1594.73210\n-5656.6074\n544.82417\n0.000\n0.00\n...\n0\n0\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n2 rows × 36 columns",
    "crumbs": [
      "Papers",
      "Hassan, et al. (2019)"
    ]
  },
  {
    "objectID": "02_papers/peters_taylor_2016.html",
    "href": "02_papers/peters_taylor_2016.html",
    "title": "Peters and Taylor (2016)",
    "section": "",
    "text": "from __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\nimport numpy as np\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/peters-and-taylor-total-q/peters-and-taylor-total-q/'\nLIBRARY = 'totalq'\nTABLE = 'total_q'\nLINK_LIBRARY = 'crsp'\nLINK_TABLE = 'ccmxpf_lnkhist'\nFREQ = 'A'\nMIN_YEAR = 1950\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'permno'\nENTITY_ID_IN_CLEAN_DSET = 'permno'\nTIME_VAR_IN_RAW_DSET = 'datadate'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS f{LIBRARY}.{TABLE} and {LIBRARY}.{COMPANY_TABLE}.\n\nall_vars = list_all_vars()\n\n\nall_vars\n\n\n\n\n\n\n\n\n\nname\ntype\nwrds_library\nwrds_table\n\n\n\n\n0\ngvkey\nVARCHAR(6)\ntotalq\ntotal_q\n\n\n1\ndatadate\nDATE\ntotalq\ntotal_q\n\n\n2\nfyear\nDOUBLE_PRECISION\ntotalq\ntotal_q\n\n\n3\nk_int_know\nDOUBLE_PRECISION\ntotalq\ntotal_q\n\n\n4\nk_int_org\nDOUBLE_PRECISION\ntotalq\ntotal_q\n\n\n5\nk_int_offbs\nDOUBLE_PRECISION\ntotalq\ntotal_q\n\n\n6\nk_int\nDOUBLE_PRECISION\ntotalq\ntotal_q\n\n\n7\nq_tot\nDOUBLE_PRECISION\ntotalq\ntotal_q\n\n\n\n\n\n\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]='*', required_vars:List[str]=['gvkey',\n               'datadate'], nrows:int=None, start_date:str=None,\n               end_date:str=None)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE} library and adds PERMNO and PERMCO as in CCM\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\n*\nDefault is to get all available variables\n\n\nrequired_vars\nList[str]\n[‘gvkey’, ‘datadate’]\nlist of variables that will get downloaded, even if not in vars\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nraw = get_raw_data(vars='*')\nraw.head()\n\n\n\n\n\n\n\n\n\npermno\npermco\nliid\nlinkprim\ngvkey\ndatadate\nfyear\nk_int_know\nk_int_org\nk_int_offbs\n...\nq_tot\nxrd\nxsga\ncogs\nrdip\nat\ncapx\nppegt\nppent\ndp\n\n\n\n\n0\n25881.0\n23369.0\n01\nP\n001000\n1970-12-31\n1970.0\n0.0\n5.328974\n5.328974\n...\n0.817259\nNaN\n9.420\n30.529\nNaN\n33.450\n2.767\n14.517\n8.876\n1.352\n\n\n1\n25881.0\n23369.0\n01\nP\n001000\n1971-12-31\n1971.0\n0.0\n7.607690\n7.607690\n...\n0.508109\nNaN\n10.548\n33.973\nNaN\n29.330\n1.771\n13.269\n7.639\n1.399\n\n\n2\n25881.0\n23369.0\n01\nP\n001000\n1971-12-31\n1971.0\n0.0\n7.607690\n7.607690\n...\n0.508109\nNaN\nNaN\n23.380\nNaN\nNaN\nNaN\nNaN\nNaN\n0.868\n\n\n3\n25881.0\n23369.0\n01\nP\n001000\n1972-12-31\n1972.0\n0.0\n8.550650\n8.550650\n...\n0.516247\nNaN\n7.551\n22.702\nNaN\n19.907\n1.254\n11.709\n7.013\n1.200\n\n\n4\n25881.0\n23369.0\n01\nP\n001000\n1972-12-31\n1972.0\n0.0\n8.550650\n8.550650\n...\n0.516247\nNaN\nNaN\n21.444\nNaN\nNaN\nNaN\nNaN\nNaN\n0.933\n\n\n\n\n5 rows × 21 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   clean_kwargs:dict={})\n\nApplies pandasmore.setup_panel to df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and datadate columns\n\n\nclean_kwargs\ndict\n{}\nParams to pass to pdm.setup_panel other than panel_ids, time_var, and freq\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf_clean = process_raw_data(raw)\n\n\nsource\n\n\nfeatures\n\n features (df:pandas.core.frame.DataFrame=None)\n\n\nftrs = features(df_clean)\n\n\npdm.wins(ftrs[['i2k_tot','i2k_phy','i2k_int']]).describe()\n\n\n\n\n\n\n\n\n\ni2k_tot\ni2k_phy\ni2k_int\n\n\n\n\ncount\n175623.000000\n175623.000000\n203412.000000\n\n\nmean\n0.245097\n0.119157\n0.122255\n\n\nstd\n0.225062\n0.164408\n0.124075\n\n\nmin\n0.000340\n0.000000\n0.000000\n\n\n25%\n0.115130\n0.028412\n0.025475\n\n\n50%\n0.191825\n0.068188\n0.100432\n\n\n75%\n0.294431\n0.139660\n0.172285\n\n\nmax\n1.453925\n1.066099\n0.686001",
    "crumbs": [
      "Papers",
      "Peters and Taylor (2016)"
    ]
  },
  {
    "objectID": "02_papers/hoberg_phillips_2020.html",
    "href": "02_papers/hoberg_phillips_2020.html",
    "title": "Hoberg, Phillips (2010, 2016)",
    "section": "",
    "text": "This module downloads and processes data developed by:\n\nText-Based Network Industries and Endogenous Product Differentiation. Gerard Hoberg and Gordon Phillips, 2016, Journal of Political Economy 124 (5), 1423-1465.\nProduct Market Synergies and Competition in Mergers and Acquisitions: A Text-Based Analysis.Gerard Hoberg and Gordon Phillips, 2010, Review of Financial Studies 23 (10), 3773-3811.\n\nSee the authors’ dedicated website for more information on this dataset: https://hobergphillips.tuck.dartmouth.edu/industryclass.htm\n\nPROVIDER = 'Gerard Hoberg and Gordon Phillips, 2010, 2016'\nURL = 'https://hobergphillips.tuck.dartmouth.edu/idata/tnic3_data.zip' \nTXT_FILE = 'tnic3_data.txt'\nHOST_WEBSITE = 'https://hobergphillips.tuck.dartmouth.edu/industryclass.htm'\nFREQ = 'A'\nMIN_YEAR = 1989\nMAX_YEAR = 2021\nENTITY_ID_IN_RAW_DSET = 'gvkey' \nENTITY_ID_IN_CLEAN_DSET = 'gvkey' \nTIME_VAR_IN_RAW_DSET = 'date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nget_raw_data\n\n get_raw_data (url:str='https://hobergphillips.tuck.dartmouth.edu/idata/tn\n               ic3_data.zip', txt_file:str='tnic3_data.txt')\n\nDownload raw data from url\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl\nstr\nhttps://hobergphillips.tuck.dartmouth.edu/idata/tnic3_data.zip\n\n\n\ntxt_file\nstr\ntnic3_data.txt\nName of the data txt file inside the zip file found at url\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nraw = get_raw_data()\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   gvkey_to_permno:Union[bool,pandas.core.frame.DataFrame]\n                   =True)\n\nCleans up dates and optionally adds CRSP permnos\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\n\n\n\ngvkey_to_permno\nbool | pd.DataFrame\nTrue\nWhether to download permno-gvkey link. If DataFrame, must contain ‘gvkey’\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nclean = process_raw_data(raw)\n\n\nclean\n\n\n\n\n\n\n\n\n\ngvkey1\ngvkey2\nscore\nAdate\npermno1\npermno2\n\n\n\n\n0\n1011\n3226\n0.1508\n1988\n10082\n25022\n\n\n1\n1011\n6282\n0.0851\n1988\n10082\n46747\n\n\n2\n1011\n6734\n0.0258\n1988\n10082\n49606\n\n\n3\n1011\n7609\n0.0097\n1988\n10082\n12058\n\n\n4\n1011\n9526\n0.0369\n1988\n10082\n69519\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n25479601\n349972\n322154\n0.0444\n2021\n15642\n22523\n\n\n25479602\n349972\n331856\n0.0169\n2021\n15642\n14615\n\n\n25479603\n349972\n332115\n0.0214\n2021\n15642\n80577\n\n\n25479604\n349972\n345556\n0.0781\n2021\n15642\n16069\n\n\n25479605\n349972\n347007\n0.0711\n2021\n15642\n15533\n\n\n\n\n25479606 rows × 6 columns",
    "crumbs": [
      "Papers",
      "Hoberg, Phillips (2010, 2016)"
    ]
  },
  {
    "objectID": "01_wrds/ibes_ltg.html",
    "href": "01_wrds/ibes_ltg.html",
    "title": "ibes_ltg",
    "section": "",
    "text": "The Forecast Period End Date (fpedats) is the ending month and year of the fiscal period to which the estimate applies (unless you’re asking for a long-term-growth estimate, in which case the horizon is 3-5 years, so no explicity fiscal period is applicable).\nThe Activation Date (actdats) is the date that the forecast/actual was recorded by Thomson Reuters.\nThe Announce Date (anndats) is the date that the forecast/actual was reported.\nThe Review Date (revdats) is most recent date that an estimate was confirmed as accurate.\nThe Forecast Period Indicator (fpi) contains information about the horizon (how far into the future we are estimating). Key values: ‘0’ for LTG, ‘1’-‘5’ for 1 to 5 years in the future, ‘6’-‘9’ for 1 to 4 quarters in the future. Farther horizons are available but they are extremely poorly populated.\nNote that for Long Term Growth (LTG) estimates (fpi='0'), you must NOT select “Forecast Period End Date” as the Date Variable or the query will not return any estimates.\nTICKER is the IBES ticker, which is not necessarily the same as the offical ticker of the firm.\n\nIt is possible for a contributing broker to provide multiple revisions to an estimate on the same day. In this scenario, all estimates are available in the Detail history files and only the most current estimate is included in the mean.\nThe Brokers (estimator) and Analysts (analys) are provided under numeric codes.\n\nEstimate Revisions\nThere are estimates which are dated “after” the announcement date. We have no explanation other than the entry is in error.\nAnnouncement of earnings will increment the FPI variable by 1 in all IBES records for which review date (REVDATS)&gt; report date (ANNDATS_ACT)\nIf at the time of the next review date the analyst at the same brokerage changes her forecast for the same (TICKER, ANNDATS, FPEDATS, FPI, MEASURE, USFIRM) combination, IBES will add a new observation. If the forecast remains unchanged, IBES will not add new observations, but will adjust the review date accordingly (REVDATS)\n\n\nfrom __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Refinitiv via WRDS'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/ibes-thomson-reuters/ibes-academic/unadjusted-detail/history/'\nLIBRARY = 'ibes'\nTABLE = 'detu_epsus'\nLINK_LIBRARY = 'wrdsapps_link_crsp_ibes'\nLINK_TABLE = 'ibcrsphist'\nFREQ = 'M'\nMIN_YEAR = 1925\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'permno'\nENTITY_ID_IN_CLEAN_DSET = 'permno'\nTIME_VAR_IN_RAW_DSET = 'date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS f{LIBRARY}.{TABLE}\n\nall_vars = list_all_vars()\n\n\nall_vars.name.count()\n\n21\n\n\n\nsource\n\n\ndefault_raw_vars\n\n default_raw_vars ()\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:Union[List[str],str]=None,\n                required_vars:List[str]=[], prefix:str='a.')\n\nAdds required variables to requested variables, validates them, and builds the SQL string with their names\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str] | str\nNone\nlist of variables requested by user\n\n\nrequired_vars\nList[str]\n[]\nlist of variables that will get downloaded, even if not in vars\n\n\nprefix\nstr\na.\nstring to add in front of each variable name when we build the SQL string of variable names\n\n\nReturns\nstr\n\n\n\n\n\n\nparse_varlist(['value','fpi'])\n\n'a.value,a.fpi'\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]=None, required_vars:List[str]=['ticker',\n               'anndats'], nrows:int=None, start_date:str=None,\n               end_date:str=None, permno_match_score:tuple=(1,))\n\nDownloads vars from start_date to end_date from WRDS ibes.detu_epsus library and adds PERMNO from CRSP\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\nNone\nIf None, downloads default_raw_vars; permno, ticker, and anndats added by default\n\n\nrequired_vars\nList[str]\n[‘ticker’, ‘anndats’]\nlist of variables that will get downloaded, even if not in vars\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format; if None, defaults to current date\n\n\npermno_match_score\ntuple\n(1,)\naccuracy of permno-ibes link. 1-6. 1 is best. use &gt;1 with caution.\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nltg = get_raw_data(start_date='01/01/2019', end_date='01/01/2022', nrows=1)\nltg.head()\n\n\n\n\n\n\n\n\n\nticker\nanndats\nvalue\nfpi\nfpedats\nrevdats\nactdats\nestimator\nanalys\npdf\npermno\n\n\n\n\n0\n0001\n2019-01-04\n-174.4\n0\nNone\n2019-01-04\n2019-01-04\n183.0\n48368.0\nD\n14392.0",
    "crumbs": [
      "WRDS",
      "ibes_ltg"
    ]
  },
  {
    "objectID": "01_wrds/compq_ccm.html",
    "href": "01_wrds/compq_ccm.html",
    "title": "compq_ccm",
    "section": "",
    "text": "from __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\nimport numpy as np\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/center-research-security-prices-crsp/annual-update/crspcompustat-merged/fundamentals-quarterly/'\nLIBRARY = 'comp'\nTABLE = 'fundq'\nLINK_LIBRARY = 'crsp'\nLINK_TABLE = 'ccmxpf_lnkhist'\nCOMPANY_TABLE = 'company' #contains some header information that is missing from comp.funda (e.g. sic and naics) \nFREQ = 'Q'\nMIN_YEAR = 1961\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'permno'\nENTITY_ID_IN_CLEAN_DSET = 'permno'\nTIME_VAR_IN_RAW_DSET = 'datadate'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS f{LIBRARY}.{TABLE} and {LIBRARY}.{COMPANY_TABLE}.\n\nall_vars = list_all_vars()\n\n\nall_vars.query(\"name.str.contains('naics')\")\n\n\n\n\n\n\n\n\n\nname\ntype\nwrds_library\nwrds_table\n\n\n\n\n25\nnaics\nVARCHAR(6)\ncomp\ncompany\n\n\n\n\n\n\n\n\n\nsource\n\n\ndefault_raw_vars\n\n default_raw_vars ()\n\nDefines default variables used in get_raw_data if none are specified.\n\nprint(default_raw_vars())\n\n['datadate', 'gvkey', 'cik', 'cusip', 'fyearq', 'fqtr', 'fyr', 'sic', 'naics', 'exchg', 'rdq', 'fic', 'atq', 'req', 'xrdq', 'cheq', 'saleq', 'revtq', 'dpq', 'ibq', 'cshoq', 'ceqq', 'seqq', 'txdiq', 'ltq', 'txditcq', 'pstkq', 'pstkrq', 'lctq', 'actq', 'piq', 'niq', 'cshprq', 'epsfxq', 'opepsq', 'epsfiq', 'epspiq', 'epspxq', 'dlttq', 'dlcq', 'txtq', 'xintq', 'ppegtq', 'ppentq', 'rectq', 'invtq', 'cogsq', 'xsgaq', 'ajexq', 'prccq', 'capxy', 'oancfy', 'sstky', 'prstkcy', 'dltisy', 'dltry', 'dvpq', 'dvy', 'sppey', 'aqcy', 'fopty', 'scstkcy', 'wcapq', 'oibdpq', 'tstkq', 'apdedateq', 'fdateq', 'cdvcy', 'cheq', 'intanq', 'gdwlq', 'mibq', 'oiadpq', 'ivaoq', 'npq', 'rectrq']\n\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:List[str]=None, required_vars=[])\n\nFigures out which vars come from the {LIBRARY}.{TABLE} table and which come from the {LIBRARY}.{COMPANY_TABLE} table and adds a. and b. prefixes to variable names to feed into an SQL query\n\nparse_varlist(['atq','ltq','sic'])\n\n'a.ltq,a.atq,b.sic'\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]=None, required_vars:List[str]=['gvkey',\n               'datadate', 'fyearq', 'fqtr', 'rdq'], nrows:int=None,\n               start_date:str=None, end_date:str=None)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE} and {LIBRARY}.{COMPANY_TABLE}. It also adds sich and naicsh from the annual table (comp.funda)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\nNone\nIf None, downloads default_raw_vars; use ’*’ to get all available variables\n\n\nrequired_vars\nList[str]\n[‘gvkey’, ‘datadate’, ‘fyearq’, ‘fqtr’, ‘rdq’]\nlist of variables that will get downloaded, even if not in vars\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nReturns\npd.DataFrame\n\n\n\n\n\nThe get_raw_data function will produce unique gvkey-datadate records, which is not the case for the data we would get from the WRDS website, because they use indfmt IN ('INDL','FS') (while we use indfmt='INDL').\n\nm = get_raw_data(['atq','indfmt','sic'],nrows=1)\nm\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nfyearq\nfqtr\nrdq\nindfmt\natq\nsic\nsich\nnaicsh\npermno\npermco\nliid\nlinkprim\n\n\n\n\n0\n001000\n1970-12-31\n1970.0\n4.0\nNone\nINDL\nNone\n3089\nNone\nNone\n25881.0\n23369.0\n01\nP\n\n\n\n\n\n\n\n\n\nr = get_raw_data(vars='*', nrows=1)\nr\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nfyearq\nfqtr\nfyr\nindfmt\nconsol\npopsrc\ndatafmt\ntic\n...\nstko\nweburl\ndldte\nipodate\nsich\nnaicsh\npermno\npermco\nliid\nlinkprim\n\n\n\n\n0\n001000\n1970-12-31\n1970.0\n4.0\n12.0\nINDL\nC\nD\nSTD\nAE.2\n...\n0.0\nNone\n1978-06-30\nNone\nNone\nNone\n25881.0\n23369.0\n01\nP\n\n\n\n\n1 rows × 687 columns\n\n\n\n\n\nraw = get_raw_data(start_date='01/01/2021', end_date='01/01/2023')\n\n\nraw.head(1)\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nfyearq\nfqtr\nrdq\nexchg\nintanq\ntxditcq\noibdpq\napdedateq\n...\ncik\nwcapq\ntxtq\ncheq\nsich\nnaicsh\npermno\npermco\nliid\nlinkprim\n\n\n\n\n0\n040237\n2022-03-31\n2022.0\n1.0\nNone\n14.0\nNaN\nNaN\nNaN\nNone\n...\n0001838716\nNaN\nNaN\nNaN\n2836.0\n325414.0\n22557.0\n59079.0\n90\nP\n\n\n\n\n1 rows × 81 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   clean_kwargs:dict={})\n\nDrops duplicates, cleans up dates and applies pandasmore.setup_panel to df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and datadate columns\n\n\nclean_kwargs\ndict\n{}\nParams to pass to pdm.setup_panel other than panel_ids, time_var, and freq\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf_clean = process_raw_data(raw)\n\n\nprint(df_clean.shape)\ndf_clean.head(1)\n\n(46432, 83)\n\n\n\n\n\n\n\n\n\n\n\ndatadate\ndtdate\ndtdate_fiscal\nQdate_fiscal\nfyearq\nfqtr\nrdq\ngvkey\nexchg\nintanq\n...\nsppey\ncik\nwcapq\ntxtq\ncheq\nsich\nnaicsh\npermco\nliid\nlinkprim\n\n\npermno\nQdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10026\n2021Q1\n2021-03-31\n2021-03-31\n2021-06-30\n2021Q2\n2021.0\n2.0\n2021-04-26\n012825\n14.0\n202.138\n...\n1.262\n0000785956\n387.072\n1.752\n259.765\n2050\n311812\n7976\n01\nP\n\n\n\n\n1 rows × 83 columns\n\n\n\n\n\nsource\n\n\nytd_to_quarterly\n\n ytd_to_quarterly (df:pandas.core.frame.DataFrame=None,\n                   vars:List[str]=['capxy', 'oancfy', 'sstky', 'prstkcy',\n                   'dltisy', 'dltry', 'dvy', 'sppey', 'aqcy', 'fopty',\n                   'scstkcy'], suffix:str='_q')\n\nConvert YTD variables to quarterly variables by taking the difference between the current and previous quarter.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\n\n\n\nvars\nList[str]\n[‘capxy’, ‘oancfy’, ‘sstky’, ‘prstkcy’, ‘dltisy’, ‘dltry’, ‘dvy’, ‘sppey’, ‘aqcy’, ‘fopty’, ‘scstkcy’]\n\n\n\nsuffix\nstr\n_q\nSuffix to add to the new quarterly variables\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nq = ytd_to_quarterly(df_clean)\nq.head(0)\n\n\n\n\n\n\n\n\n\n\ncapxy_q\noancfy_q\nsstky_q\nprstkcy_q\ndltisy_q\ndltry_q\ndvy_q\nsppey_q\naqcy_q\nfopty_q\nscstkcy_q\n\n\npermno\nQdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nfeatures\n\n features (df:pandas.core.frame.DataFrame=None)\n\nComputes a set of features from df\n\nftrs = features(df_clean)\n\n\nftrs.head(1)\n\n\n\n\n\n\n\n\n\n\ncapxy_q\noancfy_q\nsstky_q\nprstkcy_q\ndltisy_q\ndltry_q\ndvy_q\nsppey_q\naqcy_q\nfopty_q\n...\ncflow_is\ncflow_cfs\ncflow_full\ncflow_is_2la\ncflow_cfs_2la\ncflow_full_2la\ncash_2a\nbooklev\ndividends_2la\nrepurchases_2la\n\n\npermno\nQdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10026\n2021Q1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n18.823\nNaN\nNaN\nNaN\nNaN\nNaN\n0.24393\n0.053648\nNaN\nNaN\n\n\n\n\n1 rows × 44 columns",
    "crumbs": [
      "WRDS",
      "compq_ccm"
    ]
  },
  {
    "objectID": "01_wrds/compa.html",
    "href": "01_wrds/compa.html",
    "title": "compa",
    "section": "",
    "text": "from __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\nimport numpy as np\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/compustat-capital-iq-standard-poors/compustat/north-america-daily/fundamentals-annual/'\nLIBRARY = 'comp'\nTABLE = 'funda'\nCOMPANY_TABLE = 'company' #contains some header information that is missing from comp.funda (e.g. sic and naics) \nFREQ = 'A'\nMIN_YEAR = 1950\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'gvkey'\nENTITY_ID_IN_CLEAN_DSET = 'gvkey'\nTIME_VAR_IN_RAW_DSET = 'datadate'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS f{LIBRARY}.{TABLE} and {LIBRARY}.{COMPANY_TABLE}.\n\nall_vars = list_all_vars()\n\n\nall_vars.loc[all_vars.name.str.contains('conm'),:]\n\n\n\n\n\n\n\n\n\nname\ntype\nwrds_library\nwrds_table\n\n\n\n\n9\nconm\nVARCHAR(70)\ncomp\nfunda\n\n\n0\nconm\nVARCHAR(70)\ncomp\ncompany\n\n\n10\nconml\nVARCHAR(100)\ncomp\ncompany\n\n\n\n\n\n\n\n\n\nsource\n\n\ndefault_raw_vars\n\n default_raw_vars ()\n\nDefines default variables used in get_raw_data if none are specified.\n\nprint(default_raw_vars())\n\n['datadate', 'gvkey', 'cusip', 'cik', 'tic', 'fyear', 'fyr', 'fic', 'naicsh', 'sich', 'sic', 'naics', 'exchg', 'lt', 'at', 'txditc', 'pstkl', 'pstkrv', 'pstk', 'csho', 'ajex', 'rdip', 'act', 'dvc', 'xad', 'seq', 'che', 'lct', 'dlc', 'ib', 'dvp', 'txdi', 'dp', 'txp', 'oancf', 'ivncf', 'fincf', 'dltt', 'mib', 'ceq', 'invt', 'cogs', 'revt', 'sale', 'capx', 'xrd', 'txdb', 'prcc_f', 'sstk', 'prstkc', 'dltis', 'dltr', 'emp', 'dd1', 'ppegt', 'ppent', 'xint', 'txt', 'sppe', 'gdwl', 'xrent', 're', 'dvpsx_f', 'tstk', 'wcap', 'rect', 'xsga', 'aqc', 'oibdp', 'dpact', 'ni', 'ivao', 'ivst', 'dv', 'intan', 'pi', 'txfo', 'pifo', 'xpp', 'drc', 'drlt', 'ap', 'xacc', 'itcb']\n\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:List[str]=None, required_vars=[])\n\nFigures out which vars come from the {LIBRARY}.{TABLE} table and which come from the {LIBRARY}.{COMPANY_TABLE} table and adds a. and b. prefixes to variable names to feed into an SQL query\n\nparse_varlist(['at','lt','sic'])\n\n'a.lt,a.at,b.sic'\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]=None, required_vars:List[str]=['gvkey',\n               'datadate'], nrows:int=None, start_date:str=None,\n               end_date:str=None)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE} library\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\nNone\nIf None, downloads default_raw_vars; use ’*’ to get all available variables\n\n\nrequired_vars\nList[str]\n[‘gvkey’, ‘datadate’]\nlist of variables that will get downloaded, even if not in vars\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nReturns\npd.DataFrame\n\n\n\n\n\nThe get_raw_data function will produce unique gvkey-datadate records, which is not the case for the data we would get from the WRDS website, because they use indfmt IN ('INDL','FS') (while we use indfmt='INDL').\n\nm = get_raw_data(['at','indfmt','sich','sic'],nrows=1)\nm\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nindfmt\nsich\nat\nsic\n\n\n\n\n0\n001000\n1961-12-31\nINDL\nNone\nNone\n3089\n\n\n\n\n\n\n\n\n\nr = get_raw_data(vars='*', nrows=1)\nr\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nfyear\nindfmt\nconsol\npopsrc\ndatafmt\ntic\ncusip\nconm\n...\npriusa\nsic\nspcindcd\nspcseccd\nspcsrc\nstate\nstko\nweburl\ndldte\nipodate\n\n\n\n\n0\n001000\n1961-12-31\n1961.0\nINDL\nC\nD\nSTD\nAE.2\n000032102\nA & E PLASTIK PAK INC\n...\n01\n3089\n325.0\n978.0\nNone\nNone\n0.0\nNone\n1978-06-30\nNone\n\n\n\n\n1 rows × 982 columns\n\n\n\n\n\nraw = get_raw_data(vars = ['at', 'lt'], start_date='01/01/2021', end_date='01/01/2022', nrows=1)\n\n\nraw.head(0)\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nlt\nat\n\n\n\n\n\n\n\n\n\n\n\nraw = get_raw_data(start_date='01/01/2021', end_date='01/01/2023')\n\n\nraw.head(0)\n\n\n\n\n\n\n\n\n\ngvkey\ndatadate\nceq\ndltr\nexchg\nact\nprcc_f\ndp\naqc\nat\n...\nwcap\nre\ncik\ndlc\npi\nap\nrdip\nxint\nrect\nsppe\n\n\n\n\n\n\n0 rows × 84 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   clean_kwargs:dict={})\n\nApplies pandasmore.setup_panel to df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and datadate columns\n\n\nclean_kwargs\ndict\n{}\nParams to pass to pdm.setup_panel other than panel_ids, time_var, and freq\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf_clean = process_raw_data(raw)\n\n\ndf_clean.head(0)\n\n\n\n\n\n\n\n\n\n\ndatadate\ndtdate\nceq\ndltr\nexchg\nact\nprcc_f\ndp\naqc\nat\n...\nwcap\nre\ncik\ndlc\npi\nap\nrdip\nxint\nrect\nsppe\n\n\ngvkey\nAdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 rows × 84 columns\n\n\n\n\n\nsource\n\n\nfeatures\n\n features (df:pandas.core.frame.DataFrame=None)\n\n\nftrs = features(df_clean)\n\n\nftrs.head(0)\n\n\n\n\n\n\n\n\n\n\nsic_full\nnaics_full\nstock_price\nlag_at\nmktcap\npstk0\npref_stock\nshreq\nbookeq\nbookeq_w_itcb\n...\ncflow_is\ncflow_cfs\ncflow_full\ncflow_is_2la\ncflow_cfs_2la\ncflow_full_2la\ncash_2a\nbooklev\ndividends_2la\nrepurchases_2la\n\n\ngvkey\nAdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 rows × 34 columns",
    "crumbs": [
      "WRDS",
      "compa"
    ]
  },
  {
    "objectID": "01_wrds/mergent.html",
    "href": "01_wrds/mergent.html",
    "title": "mergent",
    "section": "",
    "text": "Since this is a proprietary dataset, in the documentation below, I can not show any of the data that is being retrieved/generated (will show only column names).\n\nfrom __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\n\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/mergent-fixed-income-securities-database-fisd/'\nLIBRARY = 'fisd'\nTABLE = 'fisd_mergedissue'\nISSUER_TABLE = 'fisd_mergedissuer'\nFREQ = 'D'\nMIN_YEAR = 1894\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'complete_cusip'\nENTITY_ID_IN_CLEAN_DSET = 'cusip'\nTIME_VAR_IN_RAW_DSET = 'offering_date'\nTIME_VAR_IN_CLEAN_DSET = 'offering_date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS f{LIBRARY}.{TABLE}.\n\nall_vars = list_all_vars()\n\n\nall_vars.head(50)\n\n\n\n\n\n\n\n\n\nname\ntype\nwrds_library\nwrds_table\n\n\n\n\n0\nissue_id\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n1\nissuer_id\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n2\nprospectus_issuer_name\nVARCHAR(64)\nfisd\nfisd_mergedissue\n\n\n3\nissuer_cusip\nVARCHAR(6)\nfisd\nfisd_mergedissue\n\n\n4\nissue_cusip\nVARCHAR(3)\nfisd\nfisd_mergedissue\n\n\n5\nissue_name\nVARCHAR(64)\nfisd\nfisd_mergedissue\n\n\n6\nmaturity\nDATE\nfisd\nfisd_mergedissue\n\n\n7\nsecurity_level\nVARCHAR(4)\nfisd\nfisd_mergedissue\n\n\n8\nsecurity_pledge\nVARCHAR(4)\nfisd\nfisd_mergedissue\n\n\n9\nenhancement\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n10\ncoupon_type\nVARCHAR(4)\nfisd\nfisd_mergedissue\n\n\n11\nconvertible\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n12\nmtn\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n13\nasset_backed\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n14\nyankee\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n15\ncanadian\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n16\noid\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n17\nforeign_currency\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n18\nslob\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n19\nissue_offered_global\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n20\nsettlement_type\nVARCHAR(4)\nfisd\nfisd_mergedissue\n\n\n21\ngross_spread\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n22\nselling_concession\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n23\nreallowance\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n24\ncomp_neg_exch_deal\nVARCHAR(4)\nfisd\nfisd_mergedissue\n\n\n25\nrule_415_reg\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n26\nsec_reg_type1\nVARCHAR(4)\nfisd\nfisd_mergedissue\n\n\n27\nsec_reg_type2\nVARCHAR(4)\nfisd\nfisd_mergedissue\n\n\n28\nrule_144a\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n29\ntreasury_spread\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n30\ntreasury_maturity\nVARCHAR(20)\nfisd\nfisd_mergedissue\n\n\n31\noffering_amt\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n32\noffering_date\nDATE\nfisd\nfisd_mergedissue\n\n\n33\noffering_price\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n34\noffering_yield\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n35\ndelivery_date\nDATE\nfisd\nfisd_mergedissue\n\n\n36\nunit_deal\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n37\nform_of_own\nVARCHAR(4)\nfisd\nfisd_mergedissue\n\n\n38\ndenomination\nVARCHAR(9)\nfisd\nfisd_mergedissue\n\n\n39\nprincipal_amt\nDOUBLE_PRECISION\nfisd\nfisd_mergedissue\n\n\n40\ncovenants\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n41\ndefeased\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n42\ndefeasance_type\nVARCHAR(4)\nfisd\nfisd_mergedissue\n\n\n43\ndefeased_date\nDATE\nfisd\nfisd_mergedissue\n\n\n44\ndefaulted\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n45\ntender_exch_offer\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n46\nredeemable\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n47\nrefund_protection\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n48\nrefunding_date\nDATE\nfisd\nfisd_mergedissue\n\n\n49\nputable\nVARCHAR(1)\nfisd\nfisd_mergedissue\n\n\n\n\n\n\n\n\n\nsource\n\n\ndefault_raw_vars\n\n default_raw_vars ()\n\nDefines default variables used in get_raw_data if none are specified.\n\nprint(default_raw_vars())\n\n['offering_date', 'issue_id', 'issuer_id', 'issuer_cusip', 'issue_cusip', 'complete_cusip', 'isin', 'security_level', 'coupon_type', 'convertible', 'foreign_currency', 'rule_144a', 'redeemable', 'bond_type', 'maturity', 'coupon', 'offering_amt', 'offering_price', 'principal_amt', 'defaulted', 'day_count_basis', 'last_interest_date', 'first_interest_date', 'conv_commod_type', 'cusip_name', 'naics_code', 'sic_code', 'treasury_maturity', 'putable', 'country_domicile', 'private_placement', 'asset_backed', 'interest_frequency', 'dated_date']\n\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:List[str]=None, required_vars=[])\n\nValidates that vars are available in {LIBRARY}.{TABLE} table and adds a. prefixes to variable names to feed into an SQL query\n\nparse_varlist()\n\n'a.security_level,a.private_placement,b.naics_code,a.bond_type,a.putable,a.issuer_cusip,a.defaulted,a.interest_frequency,a.principal_amt,a.issue_cusip,a.rule_144a,a.complete_cusip,a.offering_amt,a.treasury_maturity,a.redeemable,a.dated_date,a.coupon,a.foreign_currency,a.maturity,a.issue_id,a.isin,a.conv_commod_type,a.first_interest_date,b.sic_code,a.offering_price,a.coupon_type,a.offering_date,a.last_interest_date,b.country_domicile,b.cusip_name,a.day_count_basis,a.convertible,a.issuer_id,a.asset_backed'\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]=None,\n               required_vars:List[str]=['offering_date', 'complete_cusip',\n               'issuer_id'], nrows:int=None, start_date:str=None,\n               end_date:str=None)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE} library\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\nNone\nIf None, downloads default_raw_vars; use ’*’ to get all available variables\n\n\nrequired_vars\nList[str]\n[‘offering_date’, ‘complete_cusip’, ‘issuer_id’]\nWill get downloaded, even if not in vars\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nraw = get_raw_data(start_date='01/01/2022')\n\n\nraw.head(0)\n\n\n\n\n\n\n\n\n\noffering_date\ncomplete_cusip\nissuer_id\nsecurity_level\nprivate_placement\nnaics_code\nbond_type\nputable\nissuer_cusip\ndefaulted\n...\nfirst_interest_date\nsic_code\noffering_price\ncoupon_type\nlast_interest_date\ncountry_domicile\ncusip_name\nday_count_basis\nconvertible\nasset_backed\n\n\n\n\n\n\n0 rows × 34 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None)\n\nMainly converts variables to categorical type to save memory.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and datadate columns\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf_clean = process_raw_data(raw)\n\n\ndf_clean.head(0)\n\n\n\n\n\n\n\n\n\noffering_date\ncusip\nissuer_id\nsecurity_level\nprivate_placement\nnaics_code\nbond_type\nputable\nissuer_cusip\ndefaulted\n...\nfirst_interest_date\nsic_code\noffering_price\ncoupon_type\nlast_interest_date\ncountry_domicile\ncusip_name\nday_count_basis\nconvertible\nasset_backed\n\n\n\n\n\n\n0 rows × 34 columns",
    "crumbs": [
      "WRDS",
      "mergent"
    ]
  },
  {
    "objectID": "01_wrds/bondret.html",
    "href": "01_wrds/bondret.html",
    "title": "bondret",
    "section": "",
    "text": "Since this is a proprietary dataset, in the documentation below, I can not show any of the data that is being retrieved/generated (will show only column names).\n\nfrom __future__ import annotations\nfrom typing import List\n\nimport pandas as pd\nimport numpy as np\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api\n\n\nPROVIDER = 'Wharton Research Data Services (WRDS)'\nURL = 'https://wrds-www.wharton.upenn.edu/pages/get-data/wrds-bond-returns/'\nLIBRARY = 'wrdsapps'\nTABLE = 'bondret'\nLINK_TABLE = 'bondcrsp_link'\nFREQ = 'M'\nMIN_YEAR = 2002\nMAX_YEAR = None\nENTITY_ID_IN_RAW_DSET = 'permno'\nENTITY_ID_IN_CLEAN_DSET = 'permno'\nTIME_VAR_IN_RAW_DSET = 'date'\nTIME_VAR_IN_CLEAN_DSET = f'{FREQ}date'\n\n\nsource\n\nlist_all_vars\n\n list_all_vars ()\n\nCollects names of all available variables from WRDS f{LIBRARY}.{TABLE}.\n\nall_vars = list_all_vars()\n\n\nall_vars.head()\n\n\n\n\n\n\n\n\n\nname\ntype\nwrds_library\nwrds_table\n\n\n\n\n0\ndate\nDATE\nwrdsapps\nbondret\n\n\n1\nissue_id\nDOUBLE_PRECISION\nwrdsapps\nbondret\n\n\n2\ncusip\nVARCHAR(9)\nwrdsapps\nbondret\n\n\n3\nbond_sym_id\nVARCHAR(14)\nwrdsapps\nbondret\n\n\n4\nbsym\nVARCHAR(12)\nwrdsapps\nbondret\n\n\n\n\n\n\n\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:List[str]=None, required_vars=[])\n\nValidates that vars are available in {LIBRARY}.{TABLE} table and adds a. prefixes to variable names to feed into an SQL query\n\nparse_varlist()\n\n'a.date,a.issue_id,a.cusip,a.bond_sym_id,a.bsym,a.isin,a.company_symbol,a.bond_type,a.security_level,a.conv,a.offering_date,a.offering_amt,a.offering_price,a.principal_amt,a.maturity,a.treasury_maturity,a.coupon,a.day_count_basis,a.dated_date,a.first_interest_date,a.last_interest_date,a.ncoups,a.amount_outstanding,a.r_sp,a.r_mr,a.r_fr,a.n_sp,a.n_mr,a.n_fr,a.rating_num,a.rating_cat,a.rating_class,a.t_date,a.t_volume,a.t_dvolume,a.t_spread,a.t_yld_pt,a.yield,a.price_eom,a.price_ldm,a.price_l5m,a.gap,a.coupmonth,a.nextcoup,a.coupamt,a.coupacc,a.multicoups,a.ret_eom,a.ret_ldm,a.ret_l5m,a.tmt,a.remcoups,a.duration,a.defaulted,a.default_date,a.default_type,a.reinstated,a.reinstated_date'\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:List[str]='*', required_vars:List[str]=['cusip',\n               'date'], nrows:int=None, start_date:str=None,\n               end_date:str=None)\n\nDownloads vars from start_date to end_date from WRDS {LIBRARY}.{TABLE} library and adds PERMNO and PERMCO\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nList[str]\n*\nDownloads all available variables by defaul\n\n\nrequired_vars\nList[str]\n[‘cusip’, ‘date’]\nlist of variables that will get downloaded, even if not in vars\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nstart_date\nstr\nNone\nStart date in MM/DD/YYYY format\n\n\nend_date\nstr\nNone\nEnd date in MM/DD/YYYY format\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\nraw = get_raw_data(nrows=1000)\n\n\nraw.head(0)\n\n\n\n\n\n\n\n\n\npermno\npermco\ndate\nissue_id\ncusip\nbond_sym_id\nbsym\nisin\ncompany_symbol\nbond_type\n...\nret_ldm\nret_l5m\ntmt\nremcoups\nduration\ndefaulted\ndefault_date\ndefault_type\nreinstated\nreinstated_date\n\n\n\n\n\n\n0 rows × 60 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (df:pandas.core.frame.DataFrame=None,\n                   clean_kwargs:dict={})\n\nApplies pandasmore.setup_panel to df\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\npd.DataFrame\nNone\nMust contain permno and datadate columns\n\n\nclean_kwargs\ndict\n{}\nParams to pass to pdm.setup_panel other than panel_ids, time_var, and freq\n\n\nReturns\npd.DataFrame\n\n\n\n\n\n\ndf_clean = process_raw_data(raw)\n\n\ndf_clean.head()\n\n\n\n\n\n\n\n\n\n\ndate\ndtdate\npermco\nissue_id\ncusip\nbond_sym_id\nbsym\nisin\ncompany_symbol\nbond_type\n...\nret_ldm\nret_l5m\ntmt\nremcoups\nduration\ndefaulted\ndefault_date\ndefault_type\nreinstated\nreinstated_date\n\n\npermno\nMdate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n26403\n2002-07\n2002-07-31\n2002-07-31\n20587\n383238.0\n00072AAA8\nDIS.GA\nNone\nUS00072AAA88\nDIS\nCDEB\n...\nNaN\nNaN\n6.641667\n14.0\n4.797721\nN\nNone\nNone\nNone\nNone\n\n\n2002-08\n2002-08-31\n2002-08-31\n20587\n383238.0\n00072AAA8\nDIS.GA\nNone\nUS00072AAA88\nDIS\nCDEB\n...\nNaN\n0.015265\n6.555556\n13.0\n4.928041\nN\nNone\nNone\nNone\nNone\n\n\n2002-10\n2002-10-31\n2002-10-31\n20587\n383238.0\n00072AAA8\nDIS.GA\nNone\nUS00072AAA88\nDIS\nCDEB\n...\nNaN\nNaN\n6.386111\n13.0\n4.721617\nN\nNone\nNone\nNone\nNone\n\n\n2002-11\n2002-11-30\n2002-11-30\n20587\n383238.0\n00072AAA8\nDIS.GA\nNone\nUS00072AAA88\nDIS\nCDEB\n...\nNaN\n0.062946\n6.302778\n13.0\n4.714069\nN\nNone\nNone\nNone\nNone\n\n\n2003-02\n2003-02-28\n2003-02-28\n20587\n383238.0\n00072AAA8\nDIS.GA\nNone\nUS00072AAA88\nDIS\nCDEB\n...\nNaN\nNaN\n6.052778\n12.0\n4.673783\nN\nNone\nNone\nNone\nNone\n\n\n\n\n5 rows × 60 columns",
    "crumbs": [
      "WRDS",
      "bondret"
    ]
  },
  {
    "objectID": "01_wrds/linking.html",
    "href": "01_wrds/linking.html",
    "title": "linking",
    "section": "",
    "text": "Since WRDS is a subscription service, in the documentation below, I can not show any of the data that is being retrieved/generated (will show only column names).\nimport pandas as pd\n\nimport pandasmore as pdm\nfrom finsets.wrds import wrds_api",
    "crumbs": [
      "WRDS",
      "linking"
    ]
  },
  {
    "objectID": "01_wrds/linking.html#merging-crsp-and-compustat",
    "href": "01_wrds/linking.html#merging-crsp-and-compustat",
    "title": "linking",
    "section": "Merging CRSP and COMPUSTAT",
    "text": "Merging CRSP and COMPUSTAT\nOfficial documentation for this merge is here\nRelevant information from that site:\n\nBecause TICKERs and CUSIPs change over time, most datasets use permanent identifiers to indicate the same securities and companies. For example, CRSP employs PERMNO to track stocks, Compustat uses GVKEY to follow companies, and a combination of GVKEY and IID is used to track securities. As indicated in the preceding table, both PERMNO and GVKEY (+IID) remain the same, regardless of changes in TICKER, CUSIP, and company names.\nThe CRSP/Compustat Merged Database (CCM) is comprised of CRSP and Compustat data, together with the link and link-history references between these two databases. The key product of CCM is a permanent identifier linking table (PERMNO to GVKEY+IID), though CCM is often wrongly mistaken as the merged product of CRSP stock market data with Compustat accounting data. From an end user’s perspective, CCM only adds a link of PERMNO and PERMCO to the Compustat database, so that Compustat items can be searched by CRSP identifiers.\n\nLinkType: A code describing the connection between the CRSP and Compustat data.\n\nLU: Link research complete. Standard connection between databases.\nLC: Non-researched link to issue by CUSIP.\nLD: Duplicate link to a security. Another GVKEY/IID is a better link to that CRSP record.\n\nLinkPrim: Primary issue indicator for the link.\n\nP: Primary, identified by Compustat in monthly security data.\nC: Primary, assigned by CRSP to resolve ranges of overlapping or missing primary markers from Compustat in order to produce one primary security throughout the company history.\n\nLINKDT: The first effective date of the link.\nLINKENDDT: The last date when the link is valid. For a currently valid link, LINKENDDT is set to a NULL value (.E in SAS format).\n\nsource\n\ngvkey_permno_m\n\n gvkey_permno_m (nrows:int=None)\n\nCRSP Monthly ids, with gvkeys\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nReturns\nDataFrame\n\n\n\n\n\n\ndf = gvkey_permno_m(nrows=1)\n\n\ndf\n\n\n\n\n\n\n\n\n\npermno\nMdate\ngvkey\n\n\n\n\n0\n10000\n1986-01\n013007\n\n\n\n\n\n\n\n\n\nsource\n\n\ngvkey_permno_a\n\n gvkey_permno_a (nrows:int=None)\n\nqvkey to permno correspondence at the annual frequency. As done by CCM.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nReturns\nDataFrame\n\n\n\n\n\n\ndf = gvkey_permno_a(nrows=1)\n\n\ndf\n\n\n\n\n\n\n\n\n\npermno\nAdate\ngvkey\n\n\n\n\n0\n25881\n1970\n001000\n\n\n\n\n\n\n\n\n\nsource\n\n\ngvkey_permno_q\n\n gvkey_permno_q (nrows:int=None)\n\nqvkey to permno correspondence at the quarterly frequency. As done by CCM.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnrows\nint\nNone\nNumber of rows to download. If None, full dataset will be downloaded\n\n\nReturns\nDataFrame\n\n\n\n\n\n\ndf = gvkey_permno_q(nrows=1)\n\n\ndf\n\n\n\n\n\n\n\n\n\npermno\nQdate\ngvkey\n\n\n\n\n0\n25881\n1970Q4\n001000",
    "crumbs": [
      "WRDS",
      "linking"
    ]
  },
  {
    "objectID": "01_wrds/linking.html#merging-ibes-and-crsp",
    "href": "01_wrds/linking.html#merging-ibes-and-crsp",
    "title": "linking",
    "section": "Merging IBES and CRSP",
    "text": "Merging IBES and CRSP\n\nsource\n\nibes_ticker_permno\n\n ibes_ticker_permno (nrows:int=None)\n\n\nibes_permnos = ibes_ticker_permno(nrows=1)\n\n\nibes_permnos\n\n\n\n\n\n\n\n\n\nticker\npermno\nncusip\nsdate\nedate\nscore\n\n\n\n\n0\n0000\n14471.0\n87482X10\n2014-02-20\n2016-08-31\n1.0",
    "crumbs": [
      "WRDS",
      "linking"
    ]
  },
  {
    "objectID": "01_wrds/linking.html#merging-trace-bond-data-with-crsp",
    "href": "01_wrds/linking.html#merging-trace-bond-data-with-crsp",
    "title": "linking",
    "section": "Merging TRACE Bond Data with CRSP",
    "text": "Merging TRACE Bond Data with CRSP\n\nsource\n\nbond_cusip_permno\n\n bond_cusip_permno (nrows:int=None)\n\n\ncusip_permnos = bond_cusip_permno(nrows=1)\n\n\ncusip_permnos\n\n\n\n\n\n\n\n\n\ncusip\npermno\npermco\ntrace_startdt\ntrace_enddt\ncrsp_startdt\ncrsp_enddt\nlink_startdt\nlink_enddt\n\n\n\n\n0\n000336AC1\n60687\n21372\n2014-08-22\n2014-08-22\n2002-01-02\n2022-12-30\n2014-08-22\n2014-08-22",
    "crumbs": [
      "WRDS",
      "linking"
    ]
  },
  {
    "objectID": "00_fred/fred.html",
    "href": "00_fred/fred.html",
    "title": "fred",
    "section": "",
    "text": "This module is a wrapper on the fred_api module, which itself is a fork of fredapi.\nTo use the functions in the fred module, you’ll need an API key from the St. Louis FRED.\nGet one here and store it in your environment variables under the name FRED_API_KEY\nAlternatively, you can supply the API key directly as the api_key parameter in each function in the fred module.\n\nfrom typing import List, Dict\nimport time\nimport copy\n\nimport pandas as pd\n\nimport pandasmore as pdm\nfrom finsets.fred.fred_api import Fred\n\n\nPROVIDER = 'Federal Reserve Economic Data (FRED)'\nURL = 'https://fred.stlouisfed.org/'\n\n\nsource\n\nget_series_info\n\n get_series_info (series:str, api_key:str=None)\n\nGet metadata from FRED for given series from FRED\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nseries\nstr\n\nFRED series name\n\n\napi_key\nstr\nNone\nFRED api key. If None, will use os.getenv(“FRED_API_KEY”)\n\n\nReturns\nSeries\n\n\n\n\n\n\nget_series_info('TB3MS')\n\nid                                                                       TB3MS\nrealtime_start                                                      2023-11-12\nrealtime_end                                                        2023-11-12\ntitle                        3-Month Treasury Bill Secondary Market Rate, D...\nobservation_start                                                   1934-01-01\nobservation_end                                                     2023-10-01\nfrequency                                                              Monthly\nfrequency_short                                                              M\nunits                                                                  Percent\nunits_short                                                                  %\nseasonal_adjustment                                    Not Seasonally Adjusted\nseasonal_adjustment_short                                                  NSA\nlast_updated                                            2023-11-01 15:21:08-05\npopularity                                                                  78\nnotes                                Averages of Business Days, Discount Basis\ndtype: object\n\n\n\nsource\n\n\ndefault_raw_vars\n\n default_raw_vars ()\n\nList of FRED series that will be used in get_raw_data() if none are specified\n\nprint(default_raw_vars())\n\n['TB3MS', 'DTB3', 'GS10', 'DGS10', 'GS1', 'DGS1', 'AAA', 'BAA', 'DAAA', 'DBAA', 'FEDFUNDS', 'DFF', 'CPIAUCSL', 'CPIAUCNS', 'INDPRO', 'IPB50001SQ', 'UNRATE', 'GDP', 'GDPC1', 'GNP', 'GNPC96', 'GDPPOT', 'USREC', 'RECPROUSM156N', 'CFNAI', 'UMCSENT', 'MICH', 'USEPUINDXM', 'USEPUNEWSINDXM', 'USEPUINDXD', 'VIXCLS', 'VXOCLS']\n\n\n\nsource\n\n\nparse_varlist\n\n parse_varlist (vars:List[str]=None, api_key:str=None)\n\nSplits vars by frequency and returns dict with one pd.DataFrame per frequency\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\ntyping.List[str]\nNone\nlist of variables requested by user; if None, will use default_raw_vars()\n\n\napi_key\nstr\nNone\nFRED api key. If None, will use os.getenv(“FRED_API_KEY”)\n\n\nReturns\ntyping.Dict[str, list]\n\n\n\n\n\n\nvarlist = parse_varlist(['AAA','GDP', 'INDPRO'])\n\n\nvarlist.keys()\n\ndict_keys(['info', 'M', 'Q'])\n\n\n\nvarlist['info']\n\n\n\n\n\n\n\n\n\nid\nrealtime_start\nrealtime_end\ntitle\nobservation_start\nobservation_end\nfrequency\nfrequency_short\nunits\nunits_short\nseasonal_adjustment\nseasonal_adjustment_short\nlast_updated\npopularity\nnotes\n\n\n\n\n0\nAAA\n2023-11-12\n2023-11-12\nMoody's Seasoned Aaa Corporate Bond Yield\n1919-01-01\n2023-10-01\nMonthly\nM\nPercent\n%\nNot Seasonally Adjusted\nNSA\n2023-11-01 10:17:02-05\n79\nThese instruments are based on bonds with matu...\n\n\n1\nGDP\n2023-11-12\n2023-11-12\nGross Domestic Product\n1947-01-01\n2023-07-01\nQuarterly\nQ\nBillions of Dollars\nBil. of $\nSeasonally Adjusted Annual Rate\nSAAR\n2023-10-26 07:55:01-05\n92\nBEA Account Code: A191RC Gross domestic produ...\n\n\n2\nINDPRO\n2023-11-12\n2023-11-12\nIndustrial Production: Total Index\n1919-01-01\n2023-09-01\nMonthly\nM\nIndex 2017=100\nIndex 2017=100\nSeasonally Adjusted\nSA\n2023-10-17 08:29:02-05\n78\nThe industrial production (IP) index measures ...\n\n\n\n\n\n\n\n\n\nvarlist['M']\n\n['AAA', 'INDPRO']\n\n\n\nvarlist['Q']\n\n['GDP']\n\n\n\nsource\n\n\nget_raw_data\n\n get_raw_data (vars:str=None, api_key:str=None)\n\nRetrieves vars from FRED, splits them by frequency and returns dict with one pd.DataFrame per frequency\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvars\nstr\nNone\nFRED series name\n\n\napi_key\nstr\nNone\nFRED api key. If None, will use os.getenv(“FRED_API_KEY”)\n\n\nReturns\ntyping.Dict[str, pandas.core.frame.DataFrame]\n\n\n\n\n\n\nrdat = get_raw_data(['AAA','GDP', 'INDPRO'])\n\n\nrdat.keys()\n\ndict_keys(['info', 'M', 'Q'])\n\n\n\nrdat['M']\n\n\n\n\n\n\n\n\n\nAAA\nINDPRO\n\n\n\n\n1919-01-01\n5.35\n4.8665\n\n\n1919-02-01\n5.35\n4.6514\n\n\n1919-03-01\n5.39\n4.5170\n\n\n1919-04-01\n5.44\n4.5976\n\n\n1919-05-01\n5.39\n4.6245\n\n\n...\n...\n...\n\n\n2023-06-01\n4.65\n102.2924\n\n\n2023-07-01\n4.66\n103.2895\n\n\n2023-08-01\n4.95\n103.3170\n\n\n2023-09-01\n5.13\n103.6115\n\n\n2023-10-01\n5.61\nNaN\n\n\n\n\n1258 rows × 2 columns\n\n\n\n\n\nrdat['Q']\n\n\n\n\n\n\n\n\n\nGDP\n\n\n\n\n1947-01-01\n243.164\n\n\n1947-04-01\n245.968\n\n\n1947-07-01\n249.585\n\n\n1947-10-01\n259.745\n\n\n1948-01-01\n265.742\n\n\n...\n...\n\n\n2022-07-01\n25994.639\n\n\n2022-10-01\n26408.405\n\n\n2023-01-01\n26813.601\n\n\n2023-04-01\n27063.012\n\n\n2023-07-01\n27623.543\n\n\n\n\n307 rows × 1 columns\n\n\n\n\n\nsource\n\n\nprocess_raw_data\n\n process_raw_data (data:dict=None)\n\nProcesses data from FRED: cleans the date and sets it as index using pdm.setup_tseries\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndata\ndict\nNone\nkeys are frequency str literals; same format as the output of get_raw_data\n\n\nReturns\nDataFrame\n\n\n\n\n\n\ncdat = process_raw_data(rdat)\n\n\ncdat.keys()\n\ndict_keys(['info', 'M', 'Q'])\n\n\n\ncdat['M']\n\n\n\n\n\n\n\n\n\ndtdate\nAAA\nINDPRO\n\n\nMdate\n\n\n\n\n\n\n\n1919-01\n1919-01-01\n5.35\n4.8665\n\n\n1919-02\n1919-02-01\n5.35\n4.6514\n\n\n1919-03\n1919-03-01\n5.39\n4.5170\n\n\n1919-04\n1919-04-01\n5.44\n4.5976\n\n\n1919-05\n1919-05-01\n5.39\n4.6245\n\n\n...\n...\n...\n...\n\n\n2023-06\n2023-06-01\n4.65\n102.2924\n\n\n2023-07\n2023-07-01\n4.66\n103.2895\n\n\n2023-08\n2023-08-01\n4.95\n103.3170\n\n\n2023-09\n2023-09-01\n5.13\n103.6115\n\n\n2023-10\n2023-10-01\n5.61\nNaN\n\n\n\n\n1258 rows × 3 columns\n\n\n\n\n\nsource\n\n\nsearch\n\n search (search_text:str=None, order_by:str='popularity',\n         nr_results:int=10, api_key:str=None)\n\nSearch FRED for a given search_text, sort by popularity and return only the first nr_results\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsearch_text\nstr\nNone\nWhat to search for\n\n\norder_by\nstr\npopularity\nHow to order search results; try search_rank if you don’t find what you were looking for\n\n\nnr_results\nint\n10\nHow many results to output\n\n\napi_key\nstr\nNone\nFRED api key. If None, will use os.getenv(“FRED_API_KEY”)\n\n\nReturns\nDataFrame\n\n\n\n\n\n\nsearch('industrial production', nr_results=1)\n\n\n\n\n\n\n\n\n\ntitle\npopularity\nfrequency_short\nobservation_start\nobservation_end\nid\nrealtime_start\nrealtime_end\nfrequency\nunits\nunits_short\nseasonal_adjustment\nseasonal_adjustment_short\nlast_updated\nnotes\n\n\nseries id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nINDPRO\nIndustrial Production: Total Index\n78\nM\n1919-01-01\n2023-09-01\nINDPRO\n2023-11-12\n2023-11-12\nMonthly\nIndex 2017=100\nIndex 2017=100\nSeasonally Adjusted\nSA\n2023-10-17 08:29:02-05:00\nThe industrial production (IP) index measures ...\n\n\n\n\n\n\n\n\n\nsearch(\"three month treasury bill\", order_by='popularity',nr_results=3)\n\n\n\n\n\n\n\n\n\ntitle\npopularity\nfrequency_short\nobservation_start\nobservation_end\nid\nrealtime_start\nrealtime_end\nfrequency\nunits\nunits_short\nseasonal_adjustment\nseasonal_adjustment_short\nlast_updated\nnotes\n\n\nseries id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTB3MS\n3-Month Treasury Bill Secondary Market Rate, D...\n78\nM\n1934-01-01\n2023-10-01\nTB3MS\n2023-11-12\n2023-11-12\nMonthly\nPercent\n%\nNot Seasonally Adjusted\nNSA\n2023-11-01 15:21:08-05:00\nAverages of Business Days, Discount Basis\n\n\nDTB3\n3-Month Treasury Bill Secondary Market Rate, D...\n75\nD\n1954-01-04\n2023-11-08\nDTB3\n2023-11-12\n2023-11-12\nDaily\nPercent\n%\nNot Seasonally Adjusted\nNSA\n2023-11-09 15:20:01-06:00\nDiscount Basis\n\n\nDGS3MO\nMarket Yield on U.S. Treasury Securities at 3-...\n73\nD\n1981-09-01\n2023-11-08\nDGS3MO\n2023-11-12\n2023-11-12\nDaily\nPercent\n%\nNot Seasonally Adjusted\nNSA\n2023-11-09 15:19:09-06:00\nFor further information regarding treasury con...\n\n\n\n\n\n\n\n\n\nsearch(\"three month treasury bill\", order_by='search_rank',nr_results=3)\n\n\n\n\n\n\n\n\n\ntitle\npopularity\nfrequency_short\nobservation_start\nobservation_end\nid\nrealtime_start\nrealtime_end\nfrequency\nunits\nunits_short\nseasonal_adjustment\nseasonal_adjustment_short\nlast_updated\nnotes\n\n\nseries id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTB3MS\n3-Month Treasury Bill Secondary Market Rate, D...\n78\nM\n1934-01-01\n2023-10-01\nTB3MS\n2023-11-12\n2023-11-12\nMonthly\nPercent\n%\nNot Seasonally Adjusted\nNSA\n2023-11-01 15:21:08-05:00\nAverages of Business Days, Discount Basis\n\n\nDTB3\n3-Month Treasury Bill Secondary Market Rate, D...\n75\nD\n1954-01-04\n2023-11-08\nDTB3\n2023-11-12\n2023-11-12\nDaily\nPercent\n%\nNot Seasonally Adjusted\nNSA\n2023-11-09 15:20:01-06:00\nDiscount Basis\n\n\nWTB3MS\n3-Month Treasury Bill Secondary Market Rate, D...\n37\nW\n1954-01-08\n2023-11-03\nWTB3MS\n2023-11-12\n2023-11-12\nWeekly, Ending Friday\nPercent\n%\nNot Seasonally Adjusted\nNSA\n2023-11-06 15:22:08-06:00\nAverages of Business Days, Discount Basis",
    "crumbs": [
      "FRED",
      "fred"
    ]
  },
  {
    "objectID": "cli.html",
    "href": "cli.html",
    "title": "cli",
    "section": "",
    "text": "source\n\nsearch\n\n search (label)\n\nFuzzy search of variable labels for a given string"
  }
]